# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Client
else:
    import _Client

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Client.delete_SwigPyIterator

    def value(self):
        return _Client.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Client.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Client.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Client.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Client.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Client.SwigPyIterator_copy(self)

    def next(self):
        return _Client.SwigPyIterator_next(self)

    def __next__(self):
        return _Client.SwigPyIterator___next__(self)

    def previous(self):
        return _Client.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Client.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Client.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Client.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Client.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Client.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Client.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Client.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Client:
_Client.SwigPyIterator_swigregister(SwigPyIterator)

import seiscomp3.Logging
import seiscomp3.Config
import seiscomp3.Communication
import seiscomp3.Core
import seiscomp3.DataModel
import seiscomp3.IO
import seiscomp3.Math
import seiscomp3.Utils
class CommandLine(object):
    r"""Proxy of C++ Seiscomp::Client::CommandLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CommandLine self) -> CommandLine"""
        _Client.CommandLine_swiginit(self, _Client.new_CommandLine())

    def addGroup(self, arg2):
        r"""addGroup(CommandLine self, char const * arg2)"""
        return _Client.CommandLine_addGroup(self, arg2)

    def addOption(self, group, option, description):
        r"""addOption(CommandLine self, char const * group, char const * option, char const * description)"""
        return _Client.CommandLine_addOption(self, group, option, description)

    def parse(self, argc, argv):
        r"""parse(CommandLine self, int argc, char ** argv) -> bool"""

        argv = [ bytes(a.encode()) for a in argv ]


        return _Client.CommandLine_parse(self, argc, argv)


    def printOptions(self):
        r"""printOptions(CommandLine self)"""
        return _Client.CommandLine_printOptions(self)

    def hasOption(self, option):
        r"""hasOption(CommandLine self, std::string const & option) -> bool"""
        return _Client.CommandLine_hasOption(self, option)

    def unrecognizedOptions(self):
        r"""unrecognizedOptions(CommandLine self) -> vectorStr"""
        return _Client.CommandLine_unrecognizedOptions(self)

    def optionInt(self, option):
        r"""optionInt(CommandLine self, std::string const & option) -> int"""
        return _Client.CommandLine_optionInt(self, option)

    def optionBool(self, option):
        r"""optionBool(CommandLine self, std::string const & option) -> bool"""
        return _Client.CommandLine_optionBool(self, option)

    def optionDouble(self, option):
        r"""optionDouble(CommandLine self, std::string const & option) -> double"""
        return _Client.CommandLine_optionDouble(self, option)

    def optionString(self, option):
        r"""optionString(CommandLine self, std::string const & option) -> std::string"""
        return _Client.CommandLine_optionString(self, option)

    def addIntOption(self, *args):
        r"""
        addIntOption(CommandLine self, char const * group, char const * option, char const * description)
        addIntOption(CommandLine self, char const * group, char const * option, char const * description, int defaultValue)
        """
        return _Client.CommandLine_addIntOption(self, *args)

    def addDoubleOption(self, *args):
        r"""
        addDoubleOption(CommandLine self, char const * group, char const * option, char const * description)
        addDoubleOption(CommandLine self, char const * group, char const * option, char const * description, double defaultValue)
        """
        return _Client.CommandLine_addDoubleOption(self, *args)

    def addBoolOption(self, *args):
        r"""
        addBoolOption(CommandLine self, char const * group, char const * option, char const * description)
        addBoolOption(CommandLine self, char const * group, char const * option, char const * description, bool defaultValue)
        """
        return _Client.CommandLine_addBoolOption(self, *args)

    def addStringOption(self, *args):
        r"""
        addStringOption(CommandLine self, char const * group, char const * option, char const * description)
        addStringOption(CommandLine self, char const * group, char const * option, char const * description, std::string const & defaultValue)
        """
        return _Client.CommandLine_addStringOption(self, *args)
    __swig_destroy__ = _Client.delete_CommandLine

# Register CommandLine in _Client:
_Client.CommandLine_swigregister(CommandLine)

class RunningAverage(object):
    r"""Proxy of C++ Seiscomp::Client::RunningAverage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, timeSpanInSeconds):
        r"""__init__(RunningAverage self, int timeSpanInSeconds) -> RunningAverage"""
        _Client.RunningAverage_swiginit(self, _Client.new_RunningAverage(timeSpanInSeconds))

    def timeSpan(self):
        r"""timeSpan(RunningAverage self) -> int"""
        return _Client.RunningAverage_timeSpan(self)

    def push(self, time, count=1):
        r"""push(RunningAverage self, Time time, size_t count=1)"""
        return _Client.RunningAverage_push(self, time, count)

    def count(self, time):
        r"""count(RunningAverage self, Time time) -> int"""
        return _Client.RunningAverage_count(self, time)

    def value(self, time):
        r"""value(RunningAverage self, Time time) -> double"""
        return _Client.RunningAverage_value(self, time)

    def last(self):
        r"""last(RunningAverage self) -> Time"""
        return _Client.RunningAverage_last(self)

    def dumpBins(self):
        r"""dumpBins(RunningAverage self)"""
        return _Client.RunningAverage_dumpBins(self)
    __swig_destroy__ = _Client.delete_RunningAverage

# Register RunningAverage in _Client:
_Client.RunningAverage_swigregister(RunningAverage)

class ObjectMonitor(object):
    r"""Proxy of C++ Seiscomp::Client::ObjectMonitor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, timeSpanInSeconds):
        r"""__init__(ObjectMonitor self, int timeSpanInSeconds) -> ObjectMonitor"""
        _Client.ObjectMonitor_swiginit(self, _Client.new_ObjectMonitor(timeSpanInSeconds))
    __swig_destroy__ = _Client.delete_ObjectMonitor

    def add(self, *args):
        r"""add(ObjectMonitor self, std::string const & name, std::string const & channel="") -> RunningAverage"""
        return _Client.ObjectMonitor_add(self, *args)

    def update(self, time):
        r"""update(ObjectMonitor self, Time time)"""
        return _Client.ObjectMonitor_update(self, time)

    def begin(self):
        r"""begin(ObjectMonitor self) -> Seiscomp::Client::ObjectMonitor::const_iterator"""
        return _Client.ObjectMonitor_begin(self)

    def end(self):
        r"""end(ObjectMonitor self) -> Seiscomp::Client::ObjectMonitor::const_iterator"""
        return _Client.ObjectMonitor_end(self)

    def size(self):
        r"""size(ObjectMonitor self) -> size_t"""
        return _Client.ObjectMonitor_size(self)

# Register ObjectMonitor in _Client:
_Client.ObjectMonitor_swigregister(ObjectMonitor)

STARTED = _Client.STARTED

FINISHED = _Client.FINISHED

EApplicationStatusQuantity = _Client.EApplicationStatusQuantity

class EApplicationStatusNames(object):
    r"""Proxy of C++ Seiscomp::Client::EApplicationStatusNames class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EApplicationStatusNames self) -> EApplicationStatusNames"""
        _Client.EApplicationStatusNames_swiginit(self, _Client.new_EApplicationStatusNames())

    @staticmethod
    def name(i):
        r"""name(int i) -> char const *"""
        return _Client.EApplicationStatusNames_name(i)
    __swig_destroy__ = _Client.delete_EApplicationStatusNames

# Register EApplicationStatusNames in _Client:
_Client.EApplicationStatusNames_swigregister(EApplicationStatusNames)

def EApplicationStatusNames_name(i):
    r"""EApplicationStatusNames_name(int i) -> char const *"""
    return _Client.EApplicationStatusNames_name(i)

class ApplicationStatusMessage(seiscomp3.Core.Message):
    r"""Proxy of C++ Seiscomp::Client::ApplicationStatusMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        r"""ClassName() -> char const *"""
        return _Client.ApplicationStatusMessage_ClassName()

    @staticmethod
    def TypeInfo():
        r"""TypeInfo() -> RTTI"""
        return _Client.ApplicationStatusMessage_TypeInfo()

    def className(self):
        r"""className(ApplicationStatusMessage self) -> char const *"""
        return _Client.ApplicationStatusMessage_className(self)

    def typeInfo(self):
        r"""typeInfo(ApplicationStatusMessage self) -> RTTI"""
        return _Client.ApplicationStatusMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        r"""
        Cast(BaseObject o) -> ApplicationStatusMessage
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ApplicationStatusMessage
        """
        return _Client.ApplicationStatusMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        r"""
        ConstCast(BaseObject o) -> ApplicationStatusMessage
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ApplicationStatusMessage
        """
        return _Client.ApplicationStatusMessage_ConstCast(*args)

    def serialize(self, ar):
        r"""serialize(ApplicationStatusMessage self, GenericArchive ar)"""
        return _Client.ApplicationStatusMessage_serialize(self, ar)

    def __init__(self, *args):
        r"""
        __init__(ApplicationStatusMessage self) -> ApplicationStatusMessage
        __init__(ApplicationStatusMessage self, std::string const & module, Seiscomp::Client::ApplicationStatus status) -> ApplicationStatusMessage
        __init__(ApplicationStatusMessage self, std::string const & module, std::string const & username, Seiscomp::Client::ApplicationStatus status) -> ApplicationStatusMessage
        """
        _Client.ApplicationStatusMessage_swiginit(self, _Client.new_ApplicationStatusMessage(*args))

    def empty(self):
        r"""empty(ApplicationStatusMessage self) -> bool"""
        return _Client.ApplicationStatusMessage_empty(self)

    def module(self):
        r"""module(ApplicationStatusMessage self) -> std::string const &"""
        return _Client.ApplicationStatusMessage_module(self)

    def username(self):
        r"""username(ApplicationStatusMessage self) -> std::string const &"""
        return _Client.ApplicationStatusMessage_username(self)

    def status(self):
        r"""status(ApplicationStatusMessage self) -> Seiscomp::Client::ApplicationStatus"""
        return _Client.ApplicationStatusMessage_status(self)
    __swig_destroy__ = _Client.delete_ApplicationStatusMessage

# Register ApplicationStatusMessage in _Client:
_Client.ApplicationStatusMessage_swigregister(ApplicationStatusMessage)

def ApplicationStatusMessage_ClassName():
    r"""ApplicationStatusMessage_ClassName() -> char const *"""
    return _Client.ApplicationStatusMessage_ClassName()

def ApplicationStatusMessage_TypeInfo():
    r"""ApplicationStatusMessage_TypeInfo() -> RTTI"""
    return _Client.ApplicationStatusMessage_TypeInfo()

def ApplicationStatusMessage_Cast(*args):
    r"""
    ApplicationStatusMessage_Cast(BaseObject o) -> ApplicationStatusMessage
    ApplicationStatusMessage_Cast(Seiscomp::Core::BaseObjectPtr o) -> ApplicationStatusMessage
    """
    return _Client.ApplicationStatusMessage_Cast(*args)

def ApplicationStatusMessage_ConstCast(*args):
    r"""
    ApplicationStatusMessage_ConstCast(BaseObject o) -> ApplicationStatusMessage
    ApplicationStatusMessage_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ApplicationStatusMessage
    """
    return _Client.ApplicationStatusMessage_ConstCast(*args)

class Notification(object):
    r"""Proxy of C++ Seiscomp::Client::Notification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Object = _Client.Notification_Object
    
    Disconnect = _Client.Notification_Disconnect
    
    Reconnect = _Client.Notification_Reconnect
    
    Close = _Client.Notification_Close
    
    Timeout = _Client.Notification_Timeout
    
    Sync = _Client.Notification_Sync
    
    AcquisitionFinished = _Client.Notification_AcquisitionFinished
    

    def __init__(self, *args):
        r"""
        __init__(Notification self) -> Notification
        __init__(Notification self, BaseObject o) -> Notification
        __init__(Notification self, int t) -> Notification
        __init__(Notification self, int t, BaseObject o) -> Notification
        """
        _Client.Notification_swiginit(self, _Client.new_Notification(*args))
    object = property(_Client.Notification_object_get, _Client.Notification_object_set, doc=r"""object : p.Seiscomp::Core::BaseObject""")
    type = property(_Client.Notification_type_get, _Client.Notification_type_set, doc=r"""type : int""")
    __swig_destroy__ = _Client.delete_Notification

# Register Notification in _Client:
_Client.Notification_swigregister(Notification)

class Application(seiscomp3.Core.InterruptibleObject):
    r"""Proxy of C++ Seiscomp::Client::Application class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    COMMANDLINE = _Client.Application_COMMANDLINE
    
    CONFIGURATION = _Client.Application_CONFIGURATION
    
    LOGGING = _Client.Application_LOGGING
    
    MESSAGING = _Client.Application_MESSAGING
    
    DATABASE = _Client.Application_DATABASE
    
    PLUGINS = _Client.Application_PLUGINS
    
    ST_QUANTITY = _Client.Application_ST_QUANTITY
    

    def __init__(self, argc, argv):
        r"""__init__(Application self, int argc, char ** argv) -> Application"""

        argv = [ bytes(a.encode()) for a in argv ]


        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        _Client.Application_swiginit(self, _Client.new_Application(_self, argc, argv))
    __swig_destroy__ = _Client.delete_Application

    def __call__(self):
        r"""__call__(Application self) -> int"""
        return _Client.Application___call__(self)

    def arguments(self):
        r"""arguments(Application self) -> vectorStr"""
        return _Client.Application_arguments(self)

    def commandline(self, *args):
        r"""
        commandline(Application self) -> CommandLine
        commandline(Application self) -> CommandLine
        """
        return _Client.Application_commandline(self, *args)

    def configuration(self):
        r"""configuration(Application self) -> Config"""
        return _Client.Application_configuration(self)

    def path(self):
        r"""path(Application self) -> char const *"""
        return _Client.Application_path(self)

    def name(self):
        r"""name(Application self) -> std::string const &"""
        return _Client.Application_name(self)

    def addPluginPackagePath(self, package):
        r"""addPluginPackagePath(Application self, std::string const & package)"""
        return _Client.Application_addPluginPackagePath(self, package)

    def frameworkVersion(self):
        r"""frameworkVersion(Application self) -> char const *"""
        return _Client.Application_frameworkVersion(self)

    def agencyID(self):
        r"""agencyID(Application self) -> std::string const &"""
        return _Client.Application_agencyID(self)

    def author(self):
        r"""author(Application self) -> std::string const &"""
        return _Client.Application_author(self)

    def isAgencyIDAllowed(self, agencyID):
        r"""isAgencyIDAllowed(Application self, std::string const & agencyID) -> bool"""
        return _Client.Application_isAgencyIDAllowed(self, agencyID)

    def isAgencyIDBlocked(self, agencyID):
        r"""isAgencyIDBlocked(Application self, std::string const & agencyID) -> bool"""
        return _Client.Application_isAgencyIDBlocked(self, agencyID)

    def execute(self):
        r"""execute(Application self) -> int"""
        return _Client.Application_execute(self)

    def exit(self, returnCode):
        r"""exit(Application self, int returnCode)"""
        return _Client.Application_exit(self, returnCode)

    def quit(self):
        r"""quit(Application self)"""
        return _Client.Application_quit(self)

    def isExitRequested(self):
        r"""isExitRequested(Application self) -> bool"""
        return _Client.Application_isExitRequested(self)

    def printUsage(self):
        r"""printUsage(Application self)"""
        return _Client.Application_printUsage(self)

    def connection(self):
        r"""connection(Application self) -> Connection"""
        return _Client.Application_connection(self)

    def databaseType(self):
        r"""databaseType(Application self) -> std::string const &"""
        return _Client.Application_databaseType(self)

    def databaseParameters(self):
        r"""databaseParameters(Application self) -> std::string const &"""
        return _Client.Application_databaseParameters(self)

    def database(self):
        r"""database(Application self) -> DatabaseInterface"""
        return _Client.Application_database(self)

    def databaseURI(self):
        r"""databaseURI(Application self) -> std::string const &"""
        return _Client.Application_databaseURI(self)

    def query(self):
        r"""query(Application self) -> DatabaseQuery"""
        return _Client.Application_query(self)

    def recordStreamURL(self):
        r"""recordStreamURL(Application self) -> std::string const &"""
        return _Client.Application_recordStreamURL(self)

    def crashHandler(self):
        r"""crashHandler(Application self) -> std::string const &"""
        return _Client.Application_crashHandler(self)

    def cities(self):
        r"""cities(Application self) -> CityListD"""
        return _Client.Application_cities(self)

    def nearestCity(self, lat, lon, maxDist, minPopulation):
        r"""nearestCity(Application self, double lat, double lon, double maxDist, double minPopulation) -> CityD"""
        return _Client.Application_nearestCity(self, lat, lon, maxDist, minPopulation)

    def configModule(self):
        r"""configModule(Application self) -> ConfigModule"""
        return _Client.Application_configModule(self)

    def isStationEnabled(self, networkCode, stationCode):
        r"""isStationEnabled(Application self, std::string const & networkCode, std::string const & stationCode) -> bool"""
        return _Client.Application_isStationEnabled(self, networkCode, stationCode)

    def messagingHost(self):
        r"""messagingHost(Application self) -> std::string const &"""
        return _Client.Application_messagingHost(self)

    def enableTimer(self, seconds):
        r"""enableTimer(Application self, unsigned int seconds)"""
        return _Client.Application_enableTimer(self, seconds)

    def disableTimer(self):
        r"""disableTimer(Application self)"""
        return _Client.Application_disableTimer(self)

    def sendNotification(self, arg2):
        r"""sendNotification(Application self, Notification arg2)"""
        return _Client.Application_sendNotification(self, arg2)

    def requestSync(self, syncID):
        r"""requestSync(Application self, char const * syncID) -> bool"""
        return _Client.Application_requestSync(self, syncID)

    def sync(self, syncID=None):
        r"""sync(Application self, char const * syncID=None) -> bool"""
        return _Client.Application_sync(self, syncID)

    def waitEvent(self):
        r"""waitEvent(Application self) -> bool"""
        return _Client.Application_waitEvent(self)

    def setDaemonEnabled(self, enable):
        r"""setDaemonEnabled(Application self, bool enable)"""
        return _Client.Application_setDaemonEnabled(self, enable)

    def setPrimaryMessagingGroup(self, arg2):
        r"""setPrimaryMessagingGroup(Application self, std::string const & arg2)"""
        return _Client.Application_setPrimaryMessagingGroup(self, arg2)

    def primaryMessagingGroup(self):
        r"""primaryMessagingGroup(Application self) -> std::string const &"""
        return _Client.Application_primaryMessagingGroup(self)

    def setMessagingUsername(self, arg2):
        r"""setMessagingUsername(Application self, std::string const & arg2)"""
        return _Client.Application_setMessagingUsername(self, arg2)

    def addMessagingSubscription(self, arg2):
        r"""addMessagingSubscription(Application self, std::string const & arg2)"""
        return _Client.Application_addMessagingSubscription(self, arg2)

    def setDatabaseEnabled(self, enable, tryToFetch):
        r"""setDatabaseEnabled(Application self, bool enable, bool tryToFetch)"""
        return _Client.Application_setDatabaseEnabled(self, enable, tryToFetch)

    def isDatabaseEnabled(self):
        r"""isDatabaseEnabled(Application self) -> bool"""
        return _Client.Application_isDatabaseEnabled(self)

    def isInventoryDatabaseEnabled(self):
        r"""isInventoryDatabaseEnabled(Application self) -> bool"""
        return _Client.Application_isInventoryDatabaseEnabled(self)

    def isConfigDatabaseEnabled(self):
        r"""isConfigDatabaseEnabled(Application self) -> bool"""
        return _Client.Application_isConfigDatabaseEnabled(self)

    def setMessagingEnabled(self, enable):
        r"""setMessagingEnabled(Application self, bool enable)"""
        return _Client.Application_setMessagingEnabled(self, enable)

    def isMessagingEnabled(self):
        r"""isMessagingEnabled(Application self) -> bool"""
        return _Client.Application_isMessagingEnabled(self)

    def setStartStopMessagesEnabled(self, enable):
        r"""setStartStopMessagesEnabled(Application self, bool enable)"""
        return _Client.Application_setStartStopMessagesEnabled(self, enable)

    def areStartStopMessagesEnabled(self):
        r"""areStartStopMessagesEnabled(Application self) -> bool"""
        return _Client.Application_areStartStopMessagesEnabled(self)

    def setAutoShutdownEnabled(self, enable):
        r"""setAutoShutdownEnabled(Application self, bool enable)"""
        return _Client.Application_setAutoShutdownEnabled(self, enable)

    def isAutoShutdownEnabled(self):
        r"""isAutoShutdownEnabled(Application self) -> bool"""
        return _Client.Application_isAutoShutdownEnabled(self)

    def setRecordStreamEnabled(self, enable):
        r"""setRecordStreamEnabled(Application self, bool enable)"""
        return _Client.Application_setRecordStreamEnabled(self, enable)

    def isRecordStreamEnabled(self):
        r"""isRecordStreamEnabled(Application self) -> bool"""
        return _Client.Application_isRecordStreamEnabled(self)

    def setLoadStationsEnabled(self, enable):
        r"""setLoadStationsEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadStationsEnabled(self, enable)

    def isLoadStationsEnabled(self):
        r"""isLoadStationsEnabled(Application self) -> bool"""
        return _Client.Application_isLoadStationsEnabled(self)

    def setLoadInventoryEnabled(self, enable):
        r"""setLoadInventoryEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadInventoryEnabled(self, enable)

    def isLoadInventoryEnabled(self):
        r"""isLoadInventoryEnabled(Application self) -> bool"""
        return _Client.Application_isLoadInventoryEnabled(self)

    def setLoadConfigModuleEnabled(self, enable):
        r"""setLoadConfigModuleEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadConfigModuleEnabled(self, enable)

    def isLoadConfigModuleEnabled(self):
        r"""isLoadConfigModuleEnabled(Application self) -> bool"""
        return _Client.Application_isLoadConfigModuleEnabled(self)

    def setLoadCitiesEnabled(self, enable):
        r"""setLoadCitiesEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadCitiesEnabled(self, enable)

    def isLoadCitiesEnabled(self):
        r"""isLoadCitiesEnabled(Application self) -> bool"""
        return _Client.Application_isLoadCitiesEnabled(self)

    def setLoadRegionsEnabled(self, enable):
        r"""setLoadRegionsEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadRegionsEnabled(self, enable)

    def isLoadRegionsEnabled(self):
        r"""isLoadRegionsEnabled(Application self) -> bool"""
        return _Client.Application_isLoadRegionsEnabled(self)

    def setAutoApplyNotifierEnabled(self, enable):
        r"""setAutoApplyNotifierEnabled(Application self, bool enable)"""
        return _Client.Application_setAutoApplyNotifierEnabled(self, enable)

    def isAutoApplyNotifierEnabled(self):
        r"""isAutoApplyNotifierEnabled(Application self) -> bool"""
        return _Client.Application_isAutoApplyNotifierEnabled(self)

    def setInterpretNotifierEnabled(self, enable):
        r"""setInterpretNotifierEnabled(Application self, bool enable)"""
        return _Client.Application_setInterpretNotifierEnabled(self, enable)

    def isInterpretNotifierEnabled(self):
        r"""isInterpretNotifierEnabled(Application self) -> bool"""
        return _Client.Application_isInterpretNotifierEnabled(self)

    def hasCustomPublicIDPattern(self):
        r"""hasCustomPublicIDPattern(Application self) -> bool"""
        return _Client.Application_hasCustomPublicIDPattern(self)

    def setConnectionRetries(self, arg2):
        r"""setConnectionRetries(Application self, unsigned int arg2)"""
        return _Client.Application_setConnectionRetries(self, arg2)

    def setLoggingContext(self, arg2):
        r"""setLoggingContext(Application self, bool arg2)"""
        return _Client.Application_setLoggingContext(self, arg2)

    def setLoggingComponent(self, arg2):
        r"""setLoggingComponent(Application self, bool arg2)"""
        return _Client.Application_setLoggingComponent(self, arg2)

    def setLoggingToStdErr(self, arg2):
        r"""setLoggingToStdErr(Application self, bool arg2)"""
        return _Client.Application_setLoggingToStdErr(self, arg2)

    def addLoggingComponentSubscription(self, arg2):
        r"""addLoggingComponentSubscription(Application self, std::string const & arg2)"""
        return _Client.Application_addLoggingComponentSubscription(self, arg2)

    def setConfigModuleName(self, module):
        r"""setConfigModuleName(Application self, std::string const & module)"""
        return _Client.Application_setConfigModuleName(self, module)

    def configModuleName(self):
        r"""configModuleName(Application self) -> std::string const &"""
        return _Client.Application_configModuleName(self)

    def setShutdownMasterModule(self, module):
        r"""setShutdownMasterModule(Application self, std::string const & module)"""
        return _Client.Application_setShutdownMasterModule(self, module)

    def setShutdownMasterUsername(self, username):
        r"""setShutdownMasterUsername(Application self, std::string const & username)"""
        return _Client.Application_setShutdownMasterUsername(self, username)

    def closeLogging(self):
        r"""closeLogging(Application self)"""
        return _Client.Application_closeLogging(self)

    def addInputObjectLog(self, *args):
        r"""addInputObjectLog(Application self, std::string const & name, std::string const & channel="") -> RunningAverage"""
        return _Client.Application_addInputObjectLog(self, *args)

    def addOutputObjectLog(self, *args):
        r"""addOutputObjectLog(Application self, std::string const & name, std::string const & channel="") -> RunningAverage"""
        return _Client.Application_addOutputObjectLog(self, *args)

    def logObject(self, log, timestamp, count=1):
        r"""logObject(Application self, RunningAverage log, Time timestamp, size_t count=1)"""
        return _Client.Application_logObject(self, log, timestamp, count)

    def reloadInventory(self):
        r"""reloadInventory(Application self) -> bool"""
        return _Client.Application_reloadInventory(self)

    def reloadBindings(self):
        r"""reloadBindings(Application self) -> bool"""
        return _Client.Application_reloadBindings(self)

    def handleNotifier(self, notifier):
        r"""handleNotifier(Application self, Notifier notifier)"""
        return _Client.Application_handleNotifier(self, notifier)

    def version(self):
        r"""version(Application self) -> char const *"""
        return _Client.Application_version(self)

    @staticmethod
    def Instance():
        r"""Instance() -> Application"""
        return _Client.Application_Instance()

    @staticmethod
    def HandleSignals(termination, crash):
        r"""HandleSignals(bool termination, bool crash)"""
        return _Client.Application_HandleSignals(termination, crash)

    def createCommandLineDescription(self):
        r"""createCommandLineDescription(Application self)"""
        return _Client.Application_createCommandLineDescription(self)

    def validateParameters(self):
        r"""validateParameters(Application self) -> bool"""
        return _Client.Application_validateParameters(self)

    def init(self):
        r"""init(Application self) -> bool"""
        return _Client.Application_init(self)

    def run(self):
        r"""run(Application self) -> bool"""
        return _Client.Application_run(self)

    def idle(self):
        r"""idle(Application self)"""
        return _Client.Application_idle(self)

    def done(self):
        r"""done(Application self)"""
        return _Client.Application_done(self)

    def forkProcess(self):
        r"""forkProcess(Application self) -> bool"""
        return _Client.Application_forkProcess(self)

    def initConfiguration(self):
        r"""initConfiguration(Application self) -> bool"""
        return _Client.Application_initConfiguration(self)

    def initPlugins(self):
        r"""initPlugins(Application self) -> bool"""
        return _Client.Application_initPlugins(self)

    def initDatabase(self):
        r"""initDatabase(Application self) -> bool"""
        return _Client.Application_initDatabase(self)

    def initSubscriptions(self):
        r"""initSubscriptions(Application self) -> bool"""
        return _Client.Application_initSubscriptions(self)

    def printVersion(self):
        r"""printVersion(Application self)"""
        return _Client.Application_printVersion(self)

    def printConfigVariables(self):
        r"""printConfigVariables(Application self)"""
        return _Client.Application_printConfigVariables(self)

    def schemaValidationNames(self, modules, plugins):
        r"""schemaValidationNames(Application self, vectorStr modules, vectorStr plugins)"""
        return _Client.Application_schemaValidationNames(self, modules, plugins)

    def validateSchemaParameters(self):
        r"""validateSchemaParameters(Application self) -> bool"""
        return _Client.Application_validateSchemaParameters(self)

    def handleInitializationError(self, stage):
        r"""handleInitializationError(Application self, Seiscomp::Client::Application::Stage stage) -> bool"""
        return _Client.Application_handleInitializationError(self, stage)

    def handleStartSync(self):
        r"""handleStartSync(Application self)"""
        return _Client.Application_handleStartSync(self)

    def handleEndSync(self):
        r"""handleEndSync(Application self)"""
        return _Client.Application_handleEndSync(self)

    def handleEndAcquisition(self):
        r"""handleEndAcquisition(Application self)"""
        return _Client.Application_handleEndAcquisition(self)

    def dispatch(self, arg0):
        r"""dispatch(Application self, BaseObject arg0) -> bool"""
        return _Client.Application_dispatch(self, arg0)

    def dispatchNotification(self, type, arg0):
        r"""dispatchNotification(Application self, int type, BaseObject arg0) -> bool"""
        return _Client.Application_dispatchNotification(self, type, arg0)

    def showMessage(self, arg0):
        r"""showMessage(Application self, char const * arg0)"""
        return _Client.Application_showMessage(self, arg0)

    def showWarning(self, arg0):
        r"""showWarning(Application self, char const * arg0)"""
        return _Client.Application_showWarning(self, arg0)

    def handleTimeout(self):
        r"""handleTimeout(Application self)"""
        return _Client.Application_handleTimeout(self)

    def handleClose(self):
        r"""handleClose(Application self) -> bool"""
        return _Client.Application_handleClose(self)

    def handleAutoShutdown(self):
        r"""handleAutoShutdown(Application self)"""
        return _Client.Application_handleAutoShutdown(self)

    def handleSync(self, ID):
        r"""handleSync(Application self, char const * ID)"""
        return _Client.Application_handleSync(self, ID)

    def handleDisconnect(self):
        r"""handleDisconnect(Application self)"""
        return _Client.Application_handleDisconnect(self)

    def handleReconnect(self):
        r"""handleReconnect(Application self)"""
        return _Client.Application_handleReconnect(self)

    def handleMessage(self, msg):
        r"""handleMessage(Application self, Message msg)"""
        return _Client.Application_handleMessage(self, msg)

    def handleNetworkMessage(self, msg):
        r"""handleNetworkMessage(Application self, NetworkMessage msg)"""
        return _Client.Application_handleNetworkMessage(self, msg)

    def addObject(self, parentID, arg0):
        r"""addObject(Application self, std::string const & parentID, Object arg0)"""
        return _Client.Application_addObject(self, parentID, arg0)

    def removeObject(self, parentID, arg0):
        r"""removeObject(Application self, std::string const & parentID, Object arg0)"""
        return _Client.Application_removeObject(self, parentID, arg0)

    def updateObject(self, parentID, arg0):
        r"""updateObject(Application self, std::string const & parentID, Object arg0)"""
        return _Client.Application_updateObject(self, parentID, arg0)

    def configGetBool(self, query):
        r"""configGetBool(Application self, std::string const & query) -> bool"""
        return _Client.Application_configGetBool(self, query)

    def configGetInt(self, query):
        r"""configGetInt(Application self, std::string const & query) -> int"""
        return _Client.Application_configGetInt(self, query)

    def configGetDouble(self, query):
        r"""configGetDouble(Application self, std::string const & query) -> double"""
        return _Client.Application_configGetDouble(self, query)

    def configGetString(self, query):
        r"""configGetString(Application self, std::string const & query) -> std::string"""
        return _Client.Application_configGetString(self, query)

    def configGetPath(self, query):
        r"""configGetPath(Application self, std::string const & query) -> std::string"""
        return _Client.Application_configGetPath(self, query)

    def configGetBools(self, query):
        r"""configGetBools(Application self, std::string const & query) -> vectorBool"""
        return _Client.Application_configGetBools(self, query)

    def configGetInts(self, query):
        r"""configGetInts(Application self, std::string const & query) -> vectorInt"""
        return _Client.Application_configGetInts(self, query)

    def configGetDoubles(self, query):
        r"""configGetDoubles(Application self, std::string const & query) -> vectorDouble"""
        return _Client.Application_configGetDoubles(self, query)

    def configGetStrings(self, query):
        r"""configGetStrings(Application self, std::string const & query) -> vectorStr"""
        return _Client.Application_configGetStrings(self, query)

    def configSetBool(self, query, v):
        r"""configSetBool(Application self, std::string const & query, bool v)"""
        return _Client.Application_configSetBool(self, query, v)

    def configSetInt(self, query, v):
        r"""configSetInt(Application self, std::string const & query, int v)"""
        return _Client.Application_configSetInt(self, query, v)

    def configSetDouble(self, query, v):
        r"""configSetDouble(Application self, std::string const & query, double v)"""
        return _Client.Application_configSetDouble(self, query, v)

    def configSetString(self, query, v):
        r"""configSetString(Application self, std::string const & query, std::string const & v)"""
        return _Client.Application_configSetString(self, query, v)

    def configSetBools(self, query, arg3):
        r"""configSetBools(Application self, std::string const & query, vectorBool arg3)"""
        return _Client.Application_configSetBools(self, query, arg3)

    def configSetInts(self, query, arg3):
        r"""configSetInts(Application self, std::string const & query, vectorInt arg3)"""
        return _Client.Application_configSetInts(self, query, arg3)

    def configSetDoubles(self, query, arg3):
        r"""configSetDoubles(Application self, std::string const & query, vectorDouble arg3)"""
        return _Client.Application_configSetDoubles(self, query, arg3)

    def configSetStrings(self, query, arg3):
        r"""configSetStrings(Application self, std::string const & query, vectorStr arg3)"""
        return _Client.Application_configSetStrings(self, query, arg3)

    def configUnset(self, query):
        r"""configUnset(Application self, std::string const & query)"""
        return _Client.Application_configUnset(self, query)

    def saveConfiguration(self):
        r"""saveConfiguration(Application self) -> bool"""
        return _Client.Application_saveConfiguration(self)
    def __disown__(self):
        self.this.disown()
        _Client.disown_Application(self)
        return weakref.proxy(self)

    def handleAlarm(self):
        r"""handleAlarm(Application self)"""
        return _Client.Application_handleAlarm(self)

# Register Application in _Client:
_Client.Application_swigregister(Application)

def Application_Instance():
    r"""Application_Instance() -> Application"""
    return _Client.Application_Instance()

def Application_HandleSignals(termination, crash):
    r"""Application_HandleSignals(bool termination, bool crash)"""
    return _Client.Application_HandleSignals(termination, crash)

class StreamApplication(Application):
    r"""Proxy of C++ Seiscomp::Client::StreamApplication class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, argc, argv):
        r"""__init__(StreamApplication self, int argc, char ** argv) -> StreamApplication"""

        argv = [ bytes(a.encode()) for a in argv ]


        if self.__class__ == StreamApplication:
            _self = None
        else:
            _self = self
        _Client.StreamApplication_swiginit(self, _Client.new_StreamApplication(_self, argc, argv))
    __swig_destroy__ = _Client.delete_StreamApplication

    def openStream(self):
        r"""openStream(StreamApplication self) -> bool"""
        return _Client.StreamApplication_openStream(self)

    def closeStream(self):
        r"""closeStream(StreamApplication self)"""
        return _Client.StreamApplication_closeStream(self)

    def recordStream(self):
        r"""recordStream(StreamApplication self) -> RecordStream"""
        return _Client.StreamApplication_recordStream(self)

    def addStation(self, networkCode, stationCode):
        r"""addStation(StreamApplication self, std::string const & networkCode, std::string const & stationCode) -> bool"""
        return _Client.StreamApplication_addStation(self, networkCode, stationCode)

    def addStream(self, networkCode, stationCode, locationCode, channelCode):
        r"""addStream(StreamApplication self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode) -> bool"""
        return _Client.StreamApplication_addStream(self, networkCode, stationCode, locationCode, channelCode)

    def setStartTime(self, arg2):
        r"""setStartTime(StreamApplication self, Time arg2)"""
        return _Client.StreamApplication_setStartTime(self, arg2)

    def setEndTime(self, arg2):
        r"""setEndTime(StreamApplication self, Time arg2)"""
        return _Client.StreamApplication_setEndTime(self, arg2)

    def setTimeWindow(self, arg2):
        r"""setTimeWindow(StreamApplication self, Seiscomp::Core::TimeWindow const & arg2) -> bool"""
        return _Client.StreamApplication_setTimeWindow(self, arg2)

    def setAutoAcquisitionStart(self, arg2):
        r"""setAutoAcquisitionStart(StreamApplication self, bool arg2)"""
        return _Client.StreamApplication_setAutoAcquisitionStart(self, arg2)

    def setAutoCloseOnAcquisitionFinished(self, arg2):
        r"""setAutoCloseOnAcquisitionFinished(StreamApplication self, bool arg2)"""
        return _Client.StreamApplication_setAutoCloseOnAcquisitionFinished(self, arg2)

    def requestSync(self):
        r"""requestSync(StreamApplication self)"""
        return _Client.StreamApplication_requestSync(self)

    def setRecordInputHint(self, hint):
        r"""setRecordInputHint(StreamApplication self, Seiscomp::Record::Hint hint)"""
        return _Client.StreamApplication_setRecordInputHint(self, hint)

    def setRecordDatatype(self, datatype):
        r"""setRecordDatatype(StreamApplication self, Seiscomp::Array::DataType datatype)"""
        return _Client.StreamApplication_setRecordDatatype(self, datatype)

    def recordDataType(self):
        r"""recordDataType(StreamApplication self) -> Seiscomp::Array::DataType"""
        return _Client.StreamApplication_recordDataType(self)

    def startRecordThread(self):
        r"""startRecordThread(StreamApplication self)"""
        return _Client.StreamApplication_startRecordThread(self)

    def waitForRecordThread(self):
        r"""waitForRecordThread(StreamApplication self)"""
        return _Client.StreamApplication_waitForRecordThread(self)

    def isRecordThreadActive(self):
        r"""isRecordThreadActive(StreamApplication self) -> bool"""
        return _Client.StreamApplication_isRecordThreadActive(self)

    def init(self):
        r"""init(StreamApplication self) -> bool"""
        return _Client.StreamApplication_init(self)

    def run(self):
        r"""run(StreamApplication self) -> bool"""
        return _Client.StreamApplication_run(self)

    def done(self):
        r"""done(StreamApplication self)"""
        return _Client.StreamApplication_done(self)

    def dispatch(self, obj):
        r"""dispatch(StreamApplication self, BaseObject obj) -> bool"""
        return _Client.StreamApplication_dispatch(self, obj)

    def handleRecord(self, rec):
        r"""handleRecord(StreamApplication self, Record rec)"""
        return _Client.StreamApplication_handleRecord(self, rec)

    def handleEndSync(self):
        r"""handleEndSync(StreamApplication self)"""
        return _Client.StreamApplication_handleEndSync(self)
    def __disown__(self):
        self.this.disown()
        _Client.disown_StreamApplication(self)
        return weakref.proxy(self)

    def handleAlarm(self):
        r"""handleAlarm(StreamApplication self)"""
        return _Client.StreamApplication_handleAlarm(self)

    def createCommandLineDescription(self):
        r"""createCommandLineDescription(StreamApplication self)"""
        return _Client.StreamApplication_createCommandLineDescription(self)

    def validateParameters(self):
        r"""validateParameters(StreamApplication self) -> bool"""
        return _Client.StreamApplication_validateParameters(self)

    def idle(self):
        r"""idle(StreamApplication self)"""
        return _Client.StreamApplication_idle(self)

    def forkProcess(self):
        r"""forkProcess(StreamApplication self) -> bool"""
        return _Client.StreamApplication_forkProcess(self)

    def initConfiguration(self):
        r"""initConfiguration(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initConfiguration(self)

    def initPlugins(self):
        r"""initPlugins(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initPlugins(self)

    def initDatabase(self):
        r"""initDatabase(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initDatabase(self)

    def initSubscriptions(self):
        r"""initSubscriptions(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initSubscriptions(self)

    def printVersion(self):
        r"""printVersion(StreamApplication self)"""
        return _Client.StreamApplication_printVersion(self)

    def printConfigVariables(self):
        r"""printConfigVariables(StreamApplication self)"""
        return _Client.StreamApplication_printConfigVariables(self)

    def schemaValidationNames(self, modules, plugins):
        r"""schemaValidationNames(StreamApplication self, vectorStr modules, vectorStr plugins)"""
        return _Client.StreamApplication_schemaValidationNames(self, modules, plugins)

    def validateSchemaParameters(self):
        r"""validateSchemaParameters(StreamApplication self) -> bool"""
        return _Client.StreamApplication_validateSchemaParameters(self)

    def handleInitializationError(self, stage):
        r"""handleInitializationError(StreamApplication self, Seiscomp::Client::Application::Stage stage) -> bool"""
        return _Client.StreamApplication_handleInitializationError(self, stage)

    def handleStartSync(self):
        r"""handleStartSync(StreamApplication self)"""
        return _Client.StreamApplication_handleStartSync(self)

    def handleEndAcquisition(self):
        r"""handleEndAcquisition(StreamApplication self)"""
        return _Client.StreamApplication_handleEndAcquisition(self)

    def dispatchNotification(self, type, arg0):
        r"""dispatchNotification(StreamApplication self, int type, BaseObject arg0) -> bool"""
        return _Client.StreamApplication_dispatchNotification(self, type, arg0)

    def showMessage(self, arg0):
        r"""showMessage(StreamApplication self, char const * arg0)"""
        return _Client.StreamApplication_showMessage(self, arg0)

    def showWarning(self, arg0):
        r"""showWarning(StreamApplication self, char const * arg0)"""
        return _Client.StreamApplication_showWarning(self, arg0)

    def handleTimeout(self):
        r"""handleTimeout(StreamApplication self)"""
        return _Client.StreamApplication_handleTimeout(self)

    def handleClose(self):
        r"""handleClose(StreamApplication self) -> bool"""
        return _Client.StreamApplication_handleClose(self)

    def handleAutoShutdown(self):
        r"""handleAutoShutdown(StreamApplication self)"""
        return _Client.StreamApplication_handleAutoShutdown(self)

    def handleSync(self, ID):
        r"""handleSync(StreamApplication self, char const * ID)"""
        return _Client.StreamApplication_handleSync(self, ID)

    def handleDisconnect(self):
        r"""handleDisconnect(StreamApplication self)"""
        return _Client.StreamApplication_handleDisconnect(self)

    def handleReconnect(self):
        r"""handleReconnect(StreamApplication self)"""
        return _Client.StreamApplication_handleReconnect(self)

    def handleMessage(self, msg):
        r"""handleMessage(StreamApplication self, Message msg)"""
        return _Client.StreamApplication_handleMessage(self, msg)

    def handleNetworkMessage(self, msg):
        r"""handleNetworkMessage(StreamApplication self, NetworkMessage msg)"""
        return _Client.StreamApplication_handleNetworkMessage(self, msg)

    def addObject(self, parentID, arg0):
        r"""addObject(StreamApplication self, std::string const & parentID, Object arg0)"""
        return _Client.StreamApplication_addObject(self, parentID, arg0)

    def removeObject(self, parentID, arg0):
        r"""removeObject(StreamApplication self, std::string const & parentID, Object arg0)"""
        return _Client.StreamApplication_removeObject(self, parentID, arg0)

    def updateObject(self, parentID, arg0):
        r"""updateObject(StreamApplication self, std::string const & parentID, Object arg0)"""
        return _Client.StreamApplication_updateObject(self, parentID, arg0)

# Register StreamApplication in _Client:
_Client.StreamApplication_swigregister(StreamApplication)

class StationLocation(object):
    r"""Proxy of C++ Seiscomp::Client::StationLocation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(StationLocation self) -> StationLocation
        __init__(StationLocation self, double lat, double lon, double elevation) -> StationLocation
        """
        _Client.StationLocation_swiginit(self, _Client.new_StationLocation(*args))
    latitude = property(_Client.StationLocation_latitude_get, _Client.StationLocation_latitude_set, doc=r"""latitude : double""")
    longitude = property(_Client.StationLocation_longitude_get, _Client.StationLocation_longitude_set, doc=r"""longitude : double""")
    elevation = property(_Client.StationLocation_elevation_get, _Client.StationLocation_elevation_set, doc=r"""elevation : double""")
    __swig_destroy__ = _Client.delete_StationLocation

# Register StationLocation in _Client:
_Client.StationLocation_swigregister(StationLocation)

class Inventory(object):
    r"""Proxy of C++ Seiscomp::Client::Inventory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        r"""Instance() -> Inventory"""
        return _Client.Inventory_Instance()

    def load(self, *args):
        r"""
        load(Inventory self, char const * filename)
        load(Inventory self, DatabaseReader arg2)
        """
        return _Client.Inventory_load(self, *args)

    def setInventory(self, arg2):
        r"""setInventory(Inventory self, Inventory arg2)"""
        return _Client.Inventory_setInventory(self, arg2)

    def filter(self, networkTypeFW, stationTypeFW):
        r"""filter(Inventory self, Seiscomp::Util::StringFirewall const * networkTypeFW, Seiscomp::Util::StringFirewall const * stationTypeFW) -> int"""
        return _Client.Inventory_filter(self, networkTypeFW, stationTypeFW)

    def loadStations(self, arg2):
        r"""loadStations(Inventory self, DatabaseReader arg2)"""
        return _Client.Inventory_loadStations(self, arg2)

    def stationLocation(self, networkCode, stationCode, arg4):
        r"""stationLocation(Inventory self, std::string const & networkCode, std::string const & stationCode, Time arg4) -> StationLocation"""
        return _Client.Inventory_stationLocation(self, networkCode, stationCode, arg4)

    def getStation(self, *args):
        r"""
        getStation(Inventory self, std::string const & networkCode, std::string const & stationCode, Time arg4, Seiscomp::DataModel::InventoryError * error=None) -> Station
        getStation(Inventory self, Pick arg2) -> Station
        """
        return _Client.Inventory_getStation(self, *args)

    def getSensorLocation(self, *args):
        r"""
        getSensorLocation(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, Time arg5, Seiscomp::DataModel::InventoryError * error=None) -> SensorLocation
        getSensorLocation(Inventory self, Pick arg2) -> SensorLocation
        """
        return _Client.Inventory_getSensorLocation(self, *args)

    def getStream(self, *args):
        r"""
        getStream(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6, Seiscomp::DataModel::InventoryError * error=None) -> Stream
        getStream(Inventory self, Pick arg2) -> Stream
        """
        return _Client.Inventory_getStream(self, *args)

    def getThreeComponents(self, *args):
        r"""
        getThreeComponents(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6) -> ThreeComponents
        getThreeComponents(Inventory self, Pick arg2) -> ThreeComponents
        """
        return _Client.Inventory_getThreeComponents(self, *args)

    def getGain(self, networkCode, stationCode, locationCode, channelCode, arg6):
        r"""getGain(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6) -> double"""
        return _Client.Inventory_getGain(self, networkCode, stationCode, locationCode, channelCode, arg6)

    def getAllStations(self, arg2, arg3):
        r"""getAllStations(Inventory self, Seiscomp::Client::StationList & arg2, Time arg3) -> int"""
        return _Client.Inventory_getAllStations(self, arg2, arg3)

    def inventory(self):
        r"""inventory(Inventory self) -> Inventory"""
        return _Client.Inventory_inventory(self)
    __swig_destroy__ = _Client.delete_Inventory

# Register Inventory in _Client:
_Client.Inventory_swigregister(Inventory)

def Inventory_Instance():
    r"""Inventory_Instance() -> Inventory"""
    return _Client.Inventory_Instance()

class ConfigDB(object):
    r"""Proxy of C++ Seiscomp::Client::ConfigDB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        r"""Instance() -> ConfigDB"""
        return _Client.ConfigDB_Instance()

    def load(self, *args):
        r"""
        load(ConfigDB self, DatabaseReader reader, Seiscomp::Core::Optional< std::string >::Impl const & moduleName=Unset, Seiscomp::Core::Optional< std::string >::Impl const & networkCode=Unset, Seiscomp::Core::Optional< std::string >::Impl const & stationCode=Unset, Seiscomp::Core::Optional< std::string >::Impl const & setupName=Unset, std::set< std::string,std::less< std::string >,std::allocator< std::string > > const & parameterNames=std::set< std::string >())
        load(ConfigDB self, char const * xml)
        """
        return _Client.ConfigDB_load(self, *args)

    def config(self):
        r"""config(ConfigDB self) -> Config"""
        return _Client.ConfigDB_config(self)
    __swig_destroy__ = _Client.delete_ConfigDB

# Register ConfigDB in _Client:
_Client.ConfigDB_swigregister(ConfigDB)

def ConfigDB_Instance():
    r"""ConfigDB_Instance() -> ConfigDB"""
    return _Client.ConfigDB_Instance()

class PluginRegistry(object):
    r"""Proxy of C++ Seiscomp::Client::PluginRegistry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Client.delete_PluginRegistry

    @staticmethod
    def Instance():
        r"""Instance() -> PluginRegistry"""
        return _Client.PluginRegistry_Instance()

    def addPluginName(self, name):
        r"""addPluginName(PluginRegistry self, std::string const & name)"""
        return _Client.PluginRegistry_addPluginName(self, name)

    def addPluginPath(self, path):
        r"""addPluginPath(PluginRegistry self, std::string const & path)"""
        return _Client.PluginRegistry_addPluginPath(self, path)

    def addPackagePath(self, package):
        r"""addPackagePath(PluginRegistry self, std::string const & package)"""
        return _Client.PluginRegistry_addPackagePath(self, package)

    def loadPlugins(self):
        r"""loadPlugins(PluginRegistry self) -> int"""
        return _Client.PluginRegistry_loadPlugins(self)

    def loadConfiguredPlugins(self, config):
        r"""loadConfiguredPlugins(PluginRegistry self, Config config) -> int"""
        return _Client.PluginRegistry_loadConfiguredPlugins(self, config)

    def freePlugins(self):
        r"""freePlugins(PluginRegistry self)"""
        return _Client.PluginRegistry_freePlugins(self)

    def pluginCount(self):
        r"""pluginCount(PluginRegistry self) -> int"""
        return _Client.PluginRegistry_pluginCount(self)

# Register PluginRegistry in _Client:
_Client.PluginRegistry_swigregister(PluginRegistry)

def PluginRegistry_Instance():
    r"""PluginRegistry_Instance() -> PluginRegistry"""
    return _Client.PluginRegistry_Instance()



