# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Communication
else:
    import _Communication

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import seiscomp3.Core
class Protocol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PRIORITY_DEFAULT = _Communication.Protocol_PRIORITY_DEFAULT
    PRIORITY_HIGH = _Communication.Protocol_PRIORITY_HIGH
    PRIORITY_MEDIUM = _Communication.Protocol_PRIORITY_MEDIUM
    PRIORITY_LOW = _Communication.Protocol_PRIORITY_LOW
    CP_QUANTITY = _Communication.Protocol_CP_QUANTITY
    TYPE_DEFAULT = _Communication.Protocol_TYPE_DEFAULT
    TYPE_ONE = _Communication.Protocol_TYPE_ONE
    TYPE_TWO = _Communication.Protocol_TYPE_TWO
    TYPE_THREE = _Communication.Protocol_TYPE_THREE
    CT_QUANTITY = _Communication.Protocol_CT_QUANTITY
    UNDEFINED_SERVICE_MSG = _Communication.Protocol_UNDEFINED_SERVICE_MSG
    CONNECT_GROUP_MSG = _Communication.Protocol_CONNECT_GROUP_MSG
    CONNECT_GROUP_REJECT_MSG = _Communication.Protocol_CONNECT_GROUP_REJECT_MSG
    ADMIN_REJECT_MSG = _Communication.Protocol_ADMIN_REJECT_MSG
    CONNECT_GROUP_OK_MSG = _Communication.Protocol_CONNECT_GROUP_OK_MSG
    JOIN_GROUP_MSG = _Communication.Protocol_JOIN_GROUP_MSG
    LEAVE_GROUP_MSG = _Communication.Protocol_LEAVE_GROUP_MSG
    CLIENT_DISCONNECTED_MSG = _Communication.Protocol_CLIENT_DISCONNECTED_MSG
    INVALID_GROUP_MSG = _Communication.Protocol_INVALID_GROUP_MSG
    MASTER_DISCONNECTED_MSG = _Communication.Protocol_MASTER_DISCONNECTED_MSG
    ARCHIVE_SERVICE_MSG = _Communication.Protocol_ARCHIVE_SERVICE_MSG
    ARCHIVE_REQUEST_MSG = _Communication.Protocol_ARCHIVE_REQUEST_MSG
    INVAlID_ARCHIVE_REQUEST_MSG = _Communication.Protocol_INVAlID_ARCHIVE_REQUEST_MSG
    INVALID_PROTOCOL_MSG = _Communication.Protocol_INVALID_PROTOCOL_MSG
    STATE_OF_HEALTH_CMD_MSG = _Communication.Protocol_STATE_OF_HEALTH_CMD_MSG
    STATE_OF_HEALTH_RESPONSE_MSG = _Communication.Protocol_STATE_OF_HEALTH_RESPONSE_MSG
    REJECTED_CMD_MSG = _Communication.Protocol_REJECTED_CMD_MSG
    LIST_CONNECTED_CLIENTS_CMD_MSG = _Communication.Protocol_LIST_CONNECTED_CLIENTS_CMD_MSG
    LIST_CONNECTED_CLIENTS_RESPONSE_MSG = _Communication.Protocol_LIST_CONNECTED_CLIENTS_RESPONSE_MSG
    CLIENT_DISCONNECT_CMD_MSG = _Communication.Protocol_CLIENT_DISCONNECT_CMD_MSG
    EMT_QUANTITY = _Communication.Protocol_EMT_QUANTITY
    UNDEFINED_MSG = _Communication.Protocol_UNDEFINED_MSG
    DATA_MSG = _Communication.Protocol_DATA_MSG
    ARCHIVE_MSG = _Communication.Protocol_ARCHIVE_MSG
    MT_QUANTITY = _Communication.Protocol_MT_QUANTITY
    CONTENT_BINARY = _Communication.Protocol_CONTENT_BINARY
    CONTENT_XML = _Communication.Protocol_CONTENT_XML
    CONTENT_UNCOMPRESSED_XML = _Communication.Protocol_CONTENT_UNCOMPRESSED_XML
    CONTENT_IMPORTED_XML = _Communication.Protocol_CONTENT_IMPORTED_XML
    CONTENT_BSON = _Communication.Protocol_CONTENT_BSON
    CONTENT_UNCOMPRESSED_BSON = _Communication.Protocol_CONTENT_UNCOMPRESSED_BSON
    CONTENT_JSON = _Communication.Protocol_CONTENT_JSON
    CONTENT_UNCOMPRESSED_JSON = _Communication.Protocol_CONTENT_UNCOMPRESSED_JSON
    MCT_QUANTITY = _Communication.Protocol_MCT_QUANTITY

    @staticmethod
    def MsgTypeToString(msgType):
        return _Communication.Protocol_MsgTypeToString(msgType)

    @staticmethod
    def ClientTypeToString(type):
        return _Communication.Protocol_ClientTypeToString(type)

    @staticmethod
    def ClientPriorityToString(priority):
        return _Communication.Protocol_ClientPriorityToString(priority)
    MAX_SEQ_NUM = _Communication.Protocol_MAX_SEQ_NUM
    MASTER_ARCHIVE_SIZE = _Communication.Protocol_MASTER_ARCHIVE_SIZE
    MAX_GROUPS = _Communication.Protocol_MAX_GROUPS
    STD_MSG_LEN = _Communication.Protocol_STD_MSG_LEN
    __swig_destroy__ = _Communication.delete_Protocol

# Register Protocol in _Communication:
_Communication.Protocol_swigregister(Protocol)

def Protocol_MsgTypeToString(msgType):
    return _Communication.Protocol_MsgTypeToString(msgType)

def Protocol_ClientTypeToString(type):
    return _Communication.Protocol_ClientTypeToString(type)

def Protocol_ClientPriorityToString(priority):
    return _Communication.Protocol_ClientPriorityToString(priority)
cvar = _Communication.cvar
Protocol.PROTOCOL_VERSION = _Communication.cvar.Protocol_PROTOCOL_VERSION
Protocol.PROTOCOL_VERSION_V1_0 = _Communication.cvar.Protocol_PROTOCOL_VERSION_V1_0
Protocol.PROTOCOL_VERSION_V1_1 = _Communication.cvar.Protocol_PROTOCOL_VERSION_V1_1
Protocol.HEADER_GROUP_TAG = _Communication.cvar.Protocol_HEADER_GROUP_TAG
Protocol.HEADER_SERVER_VERSION_TAG = _Communication.cvar.Protocol_HEADER_SERVER_VERSION_TAG
Protocol.HEADER_SCHEMA_VERSION_TAG = _Communication.cvar.Protocol_HEADER_SCHEMA_VERSION_TAG
Protocol.MASTER_CLIENT_NAME = _Communication.cvar.Protocol_MASTER_CLIENT_NAME
Protocol.MASTER_GROUP = _Communication.cvar.Protocol_MASTER_GROUP
Protocol.LISTENER_GROUP = _Communication.cvar.Protocol_LISTENER_GROUP
Protocol.IMPORT_GROUP = _Communication.cvar.Protocol_IMPORT_GROUP
Protocol.ADMIN_GROUP = _Communication.cvar.Protocol_ADMIN_GROUP
Protocol.STATUS_GROUP = _Communication.cvar.Protocol_STATUS_GROUP
Protocol.DEFAULT_ADMIN_CLIENT_NAME = _Communication.cvar.Protocol_DEFAULT_ADMIN_CLIENT_NAME

class SyncRequestMessage(seiscomp3.Core.Message):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.SyncRequestMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.SyncRequestMessage_TypeInfo()

    def className(self):
        return _Communication.SyncRequestMessage_className(self)

    def typeInfo(self):
        return _Communication.SyncRequestMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.SyncRequestMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.SyncRequestMessage_ConstCast(*args)

    def serialize(self, ar):
        return _Communication.SyncRequestMessage_serialize(self, ar)

    def __init__(self, *args):
        _Communication.SyncRequestMessage_swiginit(self, _Communication.new_SyncRequestMessage(*args))

    def empty(self):
        return _Communication.SyncRequestMessage_empty(self)

    def ID(self):
        return _Communication.SyncRequestMessage_ID(self)
    __swig_destroy__ = _Communication.delete_SyncRequestMessage

# Register SyncRequestMessage in _Communication:
_Communication.SyncRequestMessage_swigregister(SyncRequestMessage)

def SyncRequestMessage_ClassName():
    return _Communication.SyncRequestMessage_ClassName()

def SyncRequestMessage_TypeInfo():
    return _Communication.SyncRequestMessage_TypeInfo()

def SyncRequestMessage_Cast(*args):
    return _Communication.SyncRequestMessage_Cast(*args)

def SyncRequestMessage_ConstCast(*args):
    return _Communication.SyncRequestMessage_ConstCast(*args)

class SyncResponseMessage(seiscomp3.Core.Message):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.SyncResponseMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.SyncResponseMessage_TypeInfo()

    def className(self):
        return _Communication.SyncResponseMessage_className(self)

    def typeInfo(self):
        return _Communication.SyncResponseMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.SyncResponseMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.SyncResponseMessage_ConstCast(*args)

    def serialize(self, ar):
        return _Communication.SyncResponseMessage_serialize(self, ar)

    def __init__(self, *args):
        _Communication.SyncResponseMessage_swiginit(self, _Communication.new_SyncResponseMessage(*args))

    def empty(self):
        return _Communication.SyncResponseMessage_empty(self)

    def ID(self):
        return _Communication.SyncResponseMessage_ID(self)
    __swig_destroy__ = _Communication.delete_SyncResponseMessage

# Register SyncResponseMessage in _Communication:
_Communication.SyncResponseMessage_swigregister(SyncResponseMessage)

def SyncResponseMessage_ClassName():
    return _Communication.SyncResponseMessage_ClassName()

def SyncResponseMessage_TypeInfo():
    return _Communication.SyncResponseMessage_TypeInfo()

def SyncResponseMessage_Cast(*args):
    return _Communication.SyncResponseMessage_Cast(*args)

def SyncResponseMessage_ConstCast(*args):
    return _Communication.SyncResponseMessage_ConstCast(*args)

class ServiceRequestMessage(seiscomp3.Core.Message):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.ServiceRequestMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.ServiceRequestMessage_TypeInfo()

    def className(self):
        return _Communication.ServiceRequestMessage_className(self)

    def typeInfo(self):
        return _Communication.ServiceRequestMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.ServiceRequestMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.ServiceRequestMessage_ConstCast(*args)

    def serialize(self, ar):
        return _Communication.ServiceRequestMessage_serialize(self, ar)

    def service(self):
        return _Communication.ServiceRequestMessage_service(self)
    __swig_destroy__ = _Communication.delete_ServiceRequestMessage

# Register ServiceRequestMessage in _Communication:
_Communication.ServiceRequestMessage_swigregister(ServiceRequestMessage)

def ServiceRequestMessage_ClassName():
    return _Communication.ServiceRequestMessage_ClassName()

def ServiceRequestMessage_TypeInfo():
    return _Communication.ServiceRequestMessage_TypeInfo()

def ServiceRequestMessage_Cast(*args):
    return _Communication.ServiceRequestMessage_Cast(*args)

def ServiceRequestMessage_ConstCast(*args):
    return _Communication.ServiceRequestMessage_ConstCast(*args)

class ServiceProvideMessage(seiscomp3.Core.Message):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.ServiceProvideMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.ServiceProvideMessage_TypeInfo()

    def className(self):
        return _Communication.ServiceProvideMessage_className(self)

    def typeInfo(self):
        return _Communication.ServiceProvideMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.ServiceProvideMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.ServiceProvideMessage_ConstCast(*args)

    def serialize(self, ar):
        return _Communication.ServiceProvideMessage_serialize(self, ar)

    def service(self):
        return _Communication.ServiceProvideMessage_service(self)

    def parameters(self):
        return _Communication.ServiceProvideMessage_parameters(self)

    def empty(self):
        return _Communication.ServiceProvideMessage_empty(self)
    __swig_destroy__ = _Communication.delete_ServiceProvideMessage

# Register ServiceProvideMessage in _Communication:
_Communication.ServiceProvideMessage_swigregister(ServiceProvideMessage)

def ServiceProvideMessage_ClassName():
    return _Communication.ServiceProvideMessage_ClassName()

def ServiceProvideMessage_TypeInfo():
    return _Communication.ServiceProvideMessage_TypeInfo()

def ServiceProvideMessage_Cast(*args):
    return _Communication.ServiceProvideMessage_Cast(*args)

def ServiceProvideMessage_ConstCast(*args):
    return _Communication.ServiceProvideMessage_ConstCast(*args)

class DatabaseRequestMessage(ServiceRequestMessage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.DatabaseRequestMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.DatabaseRequestMessage_TypeInfo()

    def className(self):
        return _Communication.DatabaseRequestMessage_className(self)

    def typeInfo(self):
        return _Communication.DatabaseRequestMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.DatabaseRequestMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.DatabaseRequestMessage_ConstCast(*args)

    def __init__(self, *args):
        _Communication.DatabaseRequestMessage_swiginit(self, _Communication.new_DatabaseRequestMessage(*args))
    __swig_destroy__ = _Communication.delete_DatabaseRequestMessage

# Register DatabaseRequestMessage in _Communication:
_Communication.DatabaseRequestMessage_swigregister(DatabaseRequestMessage)

def DatabaseRequestMessage_ClassName():
    return _Communication.DatabaseRequestMessage_ClassName()

def DatabaseRequestMessage_TypeInfo():
    return _Communication.DatabaseRequestMessage_TypeInfo()

def DatabaseRequestMessage_Cast(*args):
    return _Communication.DatabaseRequestMessage_Cast(*args)

def DatabaseRequestMessage_ConstCast(*args):
    return _Communication.DatabaseRequestMessage_ConstCast(*args)

class DatabaseProvideMessage(ServiceProvideMessage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.DatabaseProvideMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.DatabaseProvideMessage_TypeInfo()

    def className(self):
        return _Communication.DatabaseProvideMessage_className(self)

    def typeInfo(self):
        return _Communication.DatabaseProvideMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.DatabaseProvideMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.DatabaseProvideMessage_ConstCast(*args)

    def __init__(self, *args):
        _Communication.DatabaseProvideMessage_swiginit(self, _Communication.new_DatabaseProvideMessage(*args))

    def database(self):
        return _Communication.DatabaseProvideMessage_database(self)
    __swig_destroy__ = _Communication.delete_DatabaseProvideMessage

# Register DatabaseProvideMessage in _Communication:
_Communication.DatabaseProvideMessage_swigregister(DatabaseProvideMessage)

def DatabaseProvideMessage_ClassName():
    return _Communication.DatabaseProvideMessage_ClassName()

def DatabaseProvideMessage_TypeInfo():
    return _Communication.DatabaseProvideMessage_TypeInfo()

def DatabaseProvideMessage_Cast(*args):
    return _Communication.DatabaseProvideMessage_Cast(*args)

def DatabaseProvideMessage_ConstCast(*args):
    return _Communication.DatabaseProvideMessage_ConstCast(*args)

class NetworkMessage(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.NetworkMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.NetworkMessage_TypeInfo()

    def className(self):
        return _Communication.NetworkMessage_className(self)

    def typeInfo(self):
        return _Communication.NetworkMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.NetworkMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.NetworkMessage_ConstCast(*args)

    def serialize(self, ar):
        return _Communication.NetworkMessage_serialize(self, ar)

    def __init__(self, *args):
        _Communication.NetworkMessage_swiginit(self, _Communication.new_NetworkMessage(*args))
    __swig_destroy__ = _Communication.delete_NetworkMessage

    def privateSenderGroup(self):
        return _Communication.NetworkMessage_privateSenderGroup(self)

    def setPrivateSenderGroup(self, privateGroup):
        return _Communication.NetworkMessage_setPrivateSenderGroup(self, privateGroup)

    def clientName(self):
        return _Communication.NetworkMessage_clientName(self)

    def hostname(self):
        return _Communication.NetworkMessage_hostname(self)

    def type(self):
        return _Communication.NetworkMessage_type(self)

    def setType(self, type):
        return _Communication.NetworkMessage_setType(self, type)

    def messageType(self):
        return _Communication.NetworkMessage_messageType(self)

    def setMessageType(self, type):
        return _Communication.NetworkMessage_setMessageType(self, type)

    def contentType(self):
        return _Communication.NetworkMessage_contentType(self)

    def setContentType(self, type):
        return _Communication.NetworkMessage_setContentType(self, type)

    def destination(self):
        return _Communication.NetworkMessage_destination(self)

    def setDestination(self, destinationGroup):
        return _Communication.NetworkMessage_setDestination(self, destinationGroup)

    def tag(self, seqNum, timeStamp):
        return _Communication.NetworkMessage_tag(self, seqNum, timeStamp)

    def tagged(self):
        return _Communication.NetworkMessage_tagged(self)

    def seqNum(self):
        return _Communication.NetworkMessage_seqNum(self)

    def timestamp(self):
        return _Communication.NetworkMessage_timestamp(self)

    def data(self):
        return _Communication.NetworkMessage_data(self)

    def dataSize(self):
        return _Communication.NetworkMessage_dataSize(self)

    def setData(self, *args):
        return _Communication.NetworkMessage_setData(self, *args)

    def setSize(self, size):
        return _Communication.NetworkMessage_setSize(self, size)

    def size(self):
        return _Communication.NetworkMessage_size(self)

    def read(self, buf, size):
        return _Communication.NetworkMessage_read(self, buf, size)

    def write(self, buf, size):
        return _Communication.NetworkMessage_write(self, buf, size)

    def copy(self):
        return _Communication.NetworkMessage_copy(self)

    @staticmethod
    def Encode(arg1, type, schemaVersion=-1):
        return _Communication.NetworkMessage_Encode(arg1, type, schemaVersion)

    def decode(self):
        return _Communication.NetworkMessage_decode(self)

# Register NetworkMessage in _Communication:
_Communication.NetworkMessage_swigregister(NetworkMessage)

def NetworkMessage_ClassName():
    return _Communication.NetworkMessage_ClassName()

def NetworkMessage_TypeInfo():
    return _Communication.NetworkMessage_TypeInfo()

def NetworkMessage_Cast(*args):
    return _Communication.NetworkMessage_Cast(*args)

def NetworkMessage_ConstCast(*args):
    return _Communication.NetworkMessage_ConstCast(*args)

def NetworkMessage_Encode(arg1, type, schemaVersion=-1):
    return _Communication.NetworkMessage_Encode(arg1, type, schemaVersion)

class ServiceMessage(NetworkMessage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.ServiceMessage_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.ServiceMessage_TypeInfo()

    def className(self):
        return _Communication.ServiceMessage_className(self)

    def typeInfo(self):
        return _Communication.ServiceMessage_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.ServiceMessage_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.ServiceMessage_ConstCast(*args)

    def serialize(self, ar):
        return _Communication.ServiceMessage_serialize(self, ar)

    def __init__(self, *args):
        _Communication.ServiceMessage_swiginit(self, _Communication.new_ServiceMessage(*args))
    __swig_destroy__ = _Communication.delete_ServiceMessage

    def protocolVersion(self):
        return _Communication.ServiceMessage_protocolVersion(self)

    def setProtocolVersion(self, version):
        return _Communication.ServiceMessage_setProtocolVersion(self, version)

    def clientType(self):
        return _Communication.ServiceMessage_clientType(self)

    def setClientType(self, clientType):
        return _Communication.ServiceMessage_setClientType(self, clientType)

    def clientPriority(self):
        return _Communication.ServiceMessage_clientPriority(self)

    def setClientPriority(self, clientPriority):
        return _Communication.ServiceMessage_setClientPriority(self, clientPriority)

    def copy(self):
        return _Communication.ServiceMessage_copy(self)

    def archiveSeqNum(self):
        return _Communication.ServiceMessage_archiveSeqNum(self)

    def setArchiveSeqNum(self, seqNum):
        return _Communication.ServiceMessage_setArchiveSeqNum(self, seqNum)

    def archiveTimestamp(self):
        return _Communication.ServiceMessage_archiveTimestamp(self)

    def setArchiveTimestamp(self, timestamp):
        return _Communication.ServiceMessage_setArchiveTimestamp(self, timestamp)

    def setPassword(self, password):
        return _Communication.ServiceMessage_setPassword(self, password)

    def password(self):
        return _Communication.ServiceMessage_password(self)

    def setPeerGroup(self, peerGroup):
        return _Communication.ServiceMessage_setPeerGroup(self, peerGroup)

    def peerGroup(self):
        return _Communication.ServiceMessage_peerGroup(self)

# Register ServiceMessage in _Communication:
_Communication.ServiceMessage_swigregister(ServiceMessage)

def ServiceMessage_ClassName():
    return _Communication.ServiceMessage_ClassName()

def ServiceMessage_TypeInfo():
    return _Communication.ServiceMessage_TypeInfo()

def ServiceMessage_Cast(*args):
    return _Communication.ServiceMessage_Cast(*args)

def ServiceMessage_ConstCast(*args):
    return _Communication.ServiceMessage_ConstCast(*args)

class NetworkInterface(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _Communication.NetworkInterface_ClassName()

    @staticmethod
    def TypeInfo():
        return _Communication.NetworkInterface_TypeInfo()

    def className(self):
        return _Communication.NetworkInterface_className(self)

    def typeInfo(self):
        return _Communication.NetworkInterface_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _Communication.NetworkInterface_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _Communication.NetworkInterface_ConstCast(*args)
    __swig_destroy__ = _Communication.delete_NetworkInterface

    def connect(self, serverAddress, clientName):
        return _Communication.NetworkInterface_connect(self, serverAddress, clientName)

    def disconnect(self):
        return _Communication.NetworkInterface_disconnect(self)

    def receive(self, error=None):
        return _Communication.NetworkInterface_receive(self, error)

    def send(self, group, type, msg, selfDiscard=True):
        return _Communication.NetworkInterface_send(self, group, type, msg, selfDiscard)

    def subscribe(self, group):
        return _Communication.NetworkInterface_subscribe(self, group)

    def unsubscribe(self, group):
        return _Communication.NetworkInterface_unsubscribe(self, group)

    def poll(self, error=None):
        return _Communication.NetworkInterface_poll(self, error)

    def isConnected(self):
        return _Communication.NetworkInterface_isConnected(self)

    @staticmethod
    def Create(service):
        return _Communication.NetworkInterface_Create(service)

    def privateGroup(self):
        return _Communication.NetworkInterface_privateGroup(self)

    def groupOfLastSender(self):
        return _Communication.NetworkInterface_groupOfLastSender(self)

    def setSequenceNumber(self, seq):
        return _Communication.NetworkInterface_setSequenceNumber(self, seq)

    def getSequenceNumber(self):
        return _Communication.NetworkInterface_getSequenceNumber(self)

# Register NetworkInterface in _Communication:
_Communication.NetworkInterface_swigregister(NetworkInterface)

def NetworkInterface_ClassName():
    return _Communication.NetworkInterface_ClassName()

def NetworkInterface_TypeInfo():
    return _Communication.NetworkInterface_TypeInfo()

def NetworkInterface_Cast(*args):
    return _Communication.NetworkInterface_Cast(*args)

def NetworkInterface_ConstCast(*args):
    return _Communication.NetworkInterface_ConstCast(*args)

def NetworkInterface_Create(service):
    return _Communication.NetworkInterface_Create(service)

class SystemConnection(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NON_THREADED = _Communication.SystemConnection_NON_THREADED
    THREADED = _Communication.SystemConnection_THREADED
    LM_QUANTITY = _Communication.SystemConnection_LM_QUANTITY

    def __init__(self, networkInterface=None):
        _Communication.SystemConnection_swiginit(self, _Communication.new_SystemConnection(networkInterface))
    __swig_destroy__ = _Communication.delete_SystemConnection

    def connect(self, *args):
        return _Communication.SystemConnection_connect(self, *args)

    def reconnect(self):
        return _Communication.SystemConnection_reconnect(self)

    def disconnect(self):
        return _Communication.SystemConnection_disconnect(self)

    def isConnected(self):
        return _Communication.SystemConnection_isConnected(self)

    def subscribe(self, group):
        return _Communication.SystemConnection_subscribe(self, group)

    def unsubscribe(self, group):
        return _Communication.SystemConnection_unsubscribe(self, group)

    def subscribeArchive(self, group):
        return _Communication.SystemConnection_subscribeArchive(self, group)

    def unsubscribeArchive(self, group):
        return _Communication.SystemConnection_unsubscribeArchive(self, group)

    def archiveRequest(self):
        return _Communication.SystemConnection_archiveRequest(self)

    def receive(self, blocking=True, error=None):
        return _Communication.SystemConnection_receive(self, blocking, error)

    def readNetworkMessage(self, blocking=True):
        return _Communication.SystemConnection_readNetworkMessage(self, blocking)

    def readLocalMessage(self):
        return _Communication.SystemConnection_readLocalMessage(self)

    def send(self, *args):
        return _Communication.SystemConnection_send(self, *args)

    def poll(self):
        return _Communication.SystemConnection_poll(self)

    def listen(self, *args):
        return _Communication.SystemConnection_listen(self, *args)

    def stopListening(self):
        return _Communication.SystemConnection_stopListening(self)

    def isListening(self):
        return _Communication.SystemConnection_isListening(self)

    def masterAddress(self):
        return _Communication.SystemConnection_masterAddress(self)

    def peerGroup(self):
        return _Communication.SystemConnection_peerGroup(self)

    def privateGroup(self):
        return _Communication.SystemConnection_privateGroup(self)

    def type(self):
        return _Communication.SystemConnection_type(self)

    def priority(self):
        return _Communication.SystemConnection_priority(self)

    def groupCount(self):
        return _Communication.SystemConnection_groupCount(self)

    def group(self, i):
        return _Communication.SystemConnection_group(self, i)

    def groups(self):
        return _Communication.SystemConnection_groups(self)

    def password(self):
        return _Communication.SystemConnection_password(self)

    def setPassword(self, password):
        return _Communication.SystemConnection_setPassword(self, password)

    def queuedMessageCount(self):
        return _Communication.SystemConnection_queuedMessageCount(self)

    def networkInterface(self):
        return _Communication.SystemConnection_networkInterface(self)

    def setSequenceNumber(self, seq):
        return _Communication.SystemConnection_setSequenceNumber(self, seq)

    def getSequenceNumber(self):
        return _Communication.SystemConnection_getSequenceNumber(self)

    def schemaVersion(self):
        return _Communication.SystemConnection_schemaVersion(self)

# Register SystemConnection in _Communication:
_Communication.SystemConnection_swigregister(SystemConnection)

BINARY_ENCODING = _Communication.BINARY_ENCODING
XML_ENCODING = _Communication.XML_ENCODING
EMessageEncodingQuantity = _Communication.EMessageEncodingQuantity
class EMessageEncodingNames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Communication.EMessageEncodingNames_swiginit(self, _Communication.new_EMessageEncodingNames())

    @staticmethod
    def name(i):
        return _Communication.EMessageEncodingNames_name(i)
    __swig_destroy__ = _Communication.delete_EMessageEncodingNames

# Register EMessageEncodingNames in _Communication:
_Communication.EMessageEncodingNames_swigregister(EMessageEncodingNames)

def EMessageEncodingNames_name(i):
    return _Communication.EMessageEncodingNames_name(i)

class Connection(SystemConnection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SKIP_UNKNOWN = _Communication.Connection_SKIP_UNKNOWN
    READ_ALL = _Communication.Connection_READ_ALL
    RM_QUANTITY = _Communication.Connection_RM_QUANTITY
    __swig_destroy__ = _Communication.delete_Connection

    def setEncoding(self, enc):
        return _Communication.Connection_setEncoding(self, enc)

    def encoding(self):
        return _Communication.Connection_encoding(self)

    def readMessage(self, *args):
        return _Communication.Connection_readMessage(self, *args)

    def readQueuedMessage(self, *args):
        return _Communication.Connection_readQueuedMessage(self, *args)

    def send(self, *args):
        return _Communication.Connection_send(self, *args)

    @staticmethod
    def Create(*args):
        return _Communication.Connection_Create(*args)

    def dispatch(self, arg2):
        return _Communication.Connection_dispatch(self, arg2)

    def transmittedBytes(self):
        return _Communication.Connection_transmittedBytes(self)

    def receivedBytes(self):
        return _Communication.Connection_receivedBytes(self)

# Register Connection in _Communication:
_Communication.Connection_swigregister(Connection)

def Connection_Create(*args):
    return _Communication.Connection_Create(*args)



