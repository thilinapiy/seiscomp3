# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _helpers
else:
    import _helpers

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import seiscomp3.Communication
import seiscomp3.Core
import seiscomp3.DataModel
import seiscomp3.IO
import seiscomp3.Math

def _readobj(obj, file):
    r"""_readobj(BaseObject obj, char const * file) -> bool"""
    return _helpers._readobj(obj, file)

def _writeobj(obj, file):
    r"""_writeobj(BaseObject obj, char const * file) -> bool"""
    return _helpers._writeobj(obj, file)
class _DatabaseQuery(seiscomp3.DataModel.DatabaseQuery):
    r"""Proxy of C++ Seiscomp::Sc3py::_private::_DatabaseQuery class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dbDriver):
        r"""__init__(_DatabaseQuery self, DatabaseInterface dbDriver) -> _DatabaseQuery"""
        _helpers._DatabaseQuery_swiginit(self, _helpers.new__DatabaseQuery(dbDriver))
    __swig_destroy__ = _helpers.delete__DatabaseQuery

    def getEvents(self, limit, offset, newestFirst, minTime, maxTime, minLatitude, maxLatitude, minLongitude, maxLongitude, minMagnitude, minArrivals):
        r"""getEvents(_DatabaseQuery self, int limit, int offset, bool newestFirst, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & minTime, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & maxTime, Seiscomp::Core::Optional< double >::Impl const & minLatitude, Seiscomp::Core::Optional< double >::Impl const & maxLatitude, Seiscomp::Core::Optional< double >::Impl const & minLongitude, Seiscomp::Core::Optional< double >::Impl const & maxLongitude, Seiscomp::Core::Optional< double >::Impl const & minMagnitude, Seiscomp::Core::Optional< int >::Impl const & minArrivals) -> DatabaseIterator"""
        return _helpers._DatabaseQuery_getEvents(self, limit, offset, newestFirst, minTime, maxTime, minLatitude, maxLatitude, minLongitude, maxLongitude, minMagnitude, minArrivals)

# Register _DatabaseQuery in _helpers:
_helpers._DatabaseQuery_swigregister(_DatabaseQuery)



from seiscomp3 import Communication, DataModel, Logging, IO

class ConnectionError(Exception):
    pass

class DatabaseError(Exception):
    pass

class SerializationError(Exception):
    pass

class DatabaseQuery(_DatabaseQuery):
    def getEvents(self, limit, offset=0, newestFirst=True, minTime=None, maxTime=None,
        minLatitude=None, maxLatitude=None, minLongitude=None, maxLongitude=None,
        minMagnitude=None, minArrivals=None):

        return _DatabaseQuery.getEvents(self, limit, offset, newestFirst,
            minTime, maxTime, minLatitude, maxLatitude, minLongitude, maxLongitude,
            minMagnitude, minArrivals)

class SimpleConnection(object):
    def __init__(self, config, name, group):
        mediatorAddress = config.getString("connection.server")
        dbDriverName = config.getString("database.type")
        dbAddress = config.getString("database.parameters")

        connection = Communication.Connection.Create(mediatorAddress, name, group)
        if connection is None:
            Logging.error("Cannot connect to Mediator")
            raise ConnectionError, "connection could not be established"
        else:
            Logging.info("Connection has been established")

        dbDriver = IO.DatabaseInterface.Create(dbDriverName)
        if dbDriver is None:
            Logging.error("Cannot find database driver " + dbDriverName)
            raise DatabaseError, "driver not found"

        if not dbDriver.connect(dbAddress):
            Logging.error("Cannot connect to database at " + dbAddress)
            raise DatabaseError, "connection could not be established"

        self.__connection = connection

# This reference to dbDriver is essential, since dbQuery becomes
# invalid when dbDriver is deleted
        self.__dbDriver = dbDriver
        self.dbQuery = DatabaseQuery(dbDriver)

    def subscribe(self, group):
        r = self.__connection.subscribe(group)
        if r != Core.Status.SEISCOMP_SUCCESS:
            raise ConnectionError, "could not subscribe to " + group

        return True

    def readMessage(self, waitForNew=True):
        r = self.__connection.readMessage(waitForNew)
        if not r:
            raise ConnectionError, "could not read message"

        return r

    def send(self, *args):
        r = self.__connection.send(*args)
        if not r:
            raise ConnectionError, "could not send message"

        return r

    def disconnect(self):
        return self.__connection.disconnect()

def readobj(obj, file):
    if not _readobj(obj, file):
        raise SerializationError, "could not read object from " + file

def writeobj(obj, file):
    if not _writeobj(obj, file):
        raise SerializationError, "could not write object to " + file




