# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Utils
else:
    import _Utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Utils.delete_SwigPyIterator

    def value(self):
        return _Utils.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Utils.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Utils.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Utils.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Utils.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Utils.SwigPyIterator_copy(self)

    def next(self):
        return _Utils.SwigPyIterator_next(self)

    def __next__(self):
        return _Utils.SwigPyIterator___next__(self)

    def previous(self):
        return _Utils.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Utils.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Utils.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Utils.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Utils.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Utils.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Utils.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Utils.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Utils:
_Utils.SwigPyIterator_swigregister(SwigPyIterator)


def basename(name):
    return _Utils.basename(name)

def fileExists(file):
    return _Utils.fileExists(file)

def pathExists(path):
    return _Utils.pathExists(path)

def createPath(path):
    return _Utils.createPath(path)

def removeExtension(name):
    return _Utils.removeExtension(name)

def bytesToStreambuf(data, n):
    return _Utils.bytesToStreambuf(data, n)

def stringToStreambuf(str):
    return _Utils.stringToStreambuf(str)

def file2ostream(fn):
    return _Utils.file2ostream(fn)

def file2istream(fn):
    return _Utils.file2istream(fn)
class StopWatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Utils.StopWatch_swiginit(self, _Utils.new_StopWatch(*args))

    def restart(self):
        return _Utils.StopWatch_restart(self)

    def reset(self):
        return _Utils.StopWatch_reset(self)

    def isActive(self):
        return _Utils.StopWatch_isActive(self)

    def elapsed(self):
        return _Utils.StopWatch_elapsed(self)
    __swig_destroy__ = _Utils.delete_StopWatch

# Register StopWatch in _Utils:
_Utils.StopWatch_swigregister(StopWatch)

class Timer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, timeoutseconds=0):
        _Utils.Timer_swiginit(self, _Utils.new_Timer(timeoutseconds))
    __swig_destroy__ = _Utils.delete_Timer

    def setTimeout(self, seconds):
        return _Utils.Timer_setTimeout(self, seconds)

    def setTimeout2(self, seconds, nanoseconds):
        return _Utils.Timer_setTimeout2(self, seconds, nanoseconds)

    def setCallback(self, arg2):
        return _Utils.Timer_setCallback(self, arg2)

    def setSingleShot(self, arg2):
        return _Utils.Timer_setSingleShot(self, arg2)

    def start(self):
        return _Utils.Timer_start(self)

    def stop(self):
        return _Utils.Timer_stop(self)

    def disable(self):
        return _Utils.Timer_disable(self)

    def isActive(self):
        return _Utils.Timer_isActive(self)

# Register Timer in _Utils:
_Utils.Timer_swigregister(Timer)

class UnitConversion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Utils.UnitConversion_swiginit(self, _Utils.new_UnitConversion(*args))
    fromUnit = property(_Utils.UnitConversion_fromUnit_get, _Utils.UnitConversion_fromUnit_set)
    toUnit = property(_Utils.UnitConversion_toUnit_get, _Utils.UnitConversion_toUnit_set)
    toQMLUnit = property(_Utils.UnitConversion_toQMLUnit_get, _Utils.UnitConversion_toQMLUnit_set)
    toSEEDUnit = property(_Utils.UnitConversion_toSEEDUnit_get, _Utils.UnitConversion_toSEEDUnit_set)
    scale = property(_Utils.UnitConversion_scale_get, _Utils.UnitConversion_scale_set)
    __swig_destroy__ = _Utils.delete_UnitConversion

# Register UnitConversion in _Utils:
_Utils.UnitConversion_swigregister(UnitConversion)

class UnitConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get(fromUnit):
        return _Utils.UnitConverter_get(fromUnit)

    def __init__(self):
        _Utils.UnitConverter_swiginit(self, _Utils.new_UnitConverter())
    __swig_destroy__ = _Utils.delete_UnitConverter

# Register UnitConverter in _Utils:
_Utils.UnitConverter_swigregister(UnitConverter)

def UnitConverter_get(fromUnit):
    return _Utils.UnitConverter_get(fromUnit)



