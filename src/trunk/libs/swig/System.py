# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _System
else:
    import _System

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _System.delete_SwigPyIterator

    def value(self):
        return _System.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _System.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _System.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _System.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _System.SwigPyIterator_equal(self, x)

    def copy(self):
        return _System.SwigPyIterator_copy(self)

    def next(self):
        return _System.SwigPyIterator_next(self)

    def __next__(self):
        return _System.SwigPyIterator___next__(self)

    def previous(self):
        return _System.SwigPyIterator_previous(self)

    def advance(self, n):
        return _System.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _System.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _System.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _System.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _System.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _System.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _System.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _System:
_System.SwigPyIterator_swigregister(SwigPyIterator)

import seiscomp3.Core
import seiscomp3.Config
class Environment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CS_UNDEFINED = _System.Environment_CS_UNDEFINED
    CS_FIRST = _System.Environment_CS_FIRST
    CS_DEFAULT_GLOBAL = _System.Environment_CS_DEFAULT_GLOBAL
    CS_DEFAULT_APP = _System.Environment_CS_DEFAULT_APP
    CS_CONFIG_GLOBAL = _System.Environment_CS_CONFIG_GLOBAL
    CS_CONFIG_APP = _System.Environment_CS_CONFIG_APP
    CS_USER_GLOBAL = _System.Environment_CS_USER_GLOBAL
    CS_USER_APP = _System.Environment_CS_USER_APP
    CS_LAST = _System.Environment_CS_LAST
    CS_QUANTITY = _System.Environment_CS_QUANTITY
    __swig_destroy__ = _System.delete_Environment

    @staticmethod
    def Instance():
        return _System.Environment_Instance()

    def homeDir(self):
        return _System.Environment_homeDir(self)

    def configDir(self):
        return _System.Environment_configDir(self)

    def appConfigDir(self):
        return _System.Environment_appConfigDir(self)

    def globalConfigDir(self):
        return _System.Environment_globalConfigDir(self)

    def installDir(self):
        return _System.Environment_installDir(self)

    def shareDir(self):
        return _System.Environment_shareDir(self)

    def logDir(self):
        return _System.Environment_logDir(self)

    def archiveFileName(self, clientname):
        return _System.Environment_archiveFileName(self, clientname)

    def configFileName(self, programname):
        return _System.Environment_configFileName(self, programname)

    def appConfigFileName(self, programname):
        return _System.Environment_appConfigFileName(self, programname)

    def globalConfigFileName(self, programname):
        return _System.Environment_globalConfigFileName(self, programname)

    def logFile(self, name):
        return _System.Environment_logFile(self, name)

    def absolutePath(self, name):
        return _System.Environment_absolutePath(self, name)

    def configFileLocation(self, name, stage):
        return _System.Environment_configFileLocation(self, name, stage)

    def initConfig(self, *args):
        return _System.Environment_initConfig(self, *args)

# Register Environment in _System:
_System.Environment_swigregister(Environment)

def Environment_Instance():
    return _System.Environment_Instance()

class SchemaParameter(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaParameter_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaParameter_TypeInfo()

    def className(self):
        return _System.SchemaParameter_className(self)

    def typeInfo(self):
        return _System.SchemaParameter_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaParameter_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaParameter_ConstCast(*args)

    def __init__(self):
        _System.SchemaParameter_swiginit(self, _System.new_SchemaParameter())

    def serialize(self, ar):
        return _System.SchemaParameter_serialize(self, ar)
    name = property(_System.SchemaParameter_name_get, _System.SchemaParameter_name_set)
    type = property(_System.SchemaParameter_type_get, _System.SchemaParameter_type_set)
    unit = property(_System.SchemaParameter_unit_get, _System.SchemaParameter_unit_set)
    defaultValue = property(_System.SchemaParameter_defaultValue_get, _System.SchemaParameter_defaultValue_set)
    description = property(_System.SchemaParameter_description_get, _System.SchemaParameter_description_set)
    readOnly = property(_System.SchemaParameter_readOnly_get, _System.SchemaParameter_readOnly_set)
    __swig_destroy__ = _System.delete_SchemaParameter

# Register SchemaParameter in _System:
_System.SchemaParameter_swigregister(SchemaParameter)

def SchemaParameter_ClassName():
    return _System.SchemaParameter_ClassName()

def SchemaParameter_TypeInfo():
    return _System.SchemaParameter_TypeInfo()

def SchemaParameter_Cast(*args):
    return _System.SchemaParameter_Cast(*args)

def SchemaParameter_ConstCast(*args):
    return _System.SchemaParameter_ConstCast(*args)

class SchemaParameters(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaParameters_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaParameters_TypeInfo()

    def className(self):
        return _System.SchemaParameters_className(self)

    def typeInfo(self):
        return _System.SchemaParameters_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaParameters_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaParameters_ConstCast(*args)

    def __init__(self):
        _System.SchemaParameters_swiginit(self, _System.new_SchemaParameters())

    def parameterCount(self):
        return _System.SchemaParameters_parameterCount(self)

    def parameter(self, i):
        return _System.SchemaParameters_parameter(self, i)

    def groupCount(self):
        return _System.SchemaParameters_groupCount(self)

    def group(self, i):
        return _System.SchemaParameters_group(self, i)

    def structureCount(self):
        return _System.SchemaParameters_structureCount(self)

    def structure(self, i):
        return _System.SchemaParameters_structure(self, i)

    def add(self, *args):
        return _System.SchemaParameters_add(self, *args)

    def accept(self, arg2):
        return _System.SchemaParameters_accept(self, arg2)

    def serialize(self, ar):
        return _System.SchemaParameters_serialize(self, ar)
    __swig_destroy__ = _System.delete_SchemaParameters

# Register SchemaParameters in _System:
_System.SchemaParameters_swigregister(SchemaParameters)

def SchemaParameters_ClassName():
    return _System.SchemaParameters_ClassName()

def SchemaParameters_TypeInfo():
    return _System.SchemaParameters_TypeInfo()

def SchemaParameters_Cast(*args):
    return _System.SchemaParameters_Cast(*args)

def SchemaParameters_ConstCast(*args):
    return _System.SchemaParameters_ConstCast(*args)

class SchemaGroup(SchemaParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaGroup_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaGroup_TypeInfo()

    def className(self):
        return _System.SchemaGroup_className(self)

    def typeInfo(self):
        return _System.SchemaGroup_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaGroup_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaGroup_ConstCast(*args)

    def __init__(self):
        _System.SchemaGroup_swiginit(self, _System.new_SchemaGroup())

    def serialize(self, ar):
        return _System.SchemaGroup_serialize(self, ar)
    name = property(_System.SchemaGroup_name_get, _System.SchemaGroup_name_set)
    description = property(_System.SchemaGroup_description_get, _System.SchemaGroup_description_set)
    __swig_destroy__ = _System.delete_SchemaGroup

# Register SchemaGroup in _System:
_System.SchemaGroup_swigregister(SchemaGroup)

def SchemaGroup_ClassName():
    return _System.SchemaGroup_ClassName()

def SchemaGroup_TypeInfo():
    return _System.SchemaGroup_TypeInfo()

def SchemaGroup_Cast(*args):
    return _System.SchemaGroup_Cast(*args)

def SchemaGroup_ConstCast(*args):
    return _System.SchemaGroup_ConstCast(*args)

class SchemaStructure(SchemaParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaStructure_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaStructure_TypeInfo()

    def className(self):
        return _System.SchemaStructure_className(self)

    def typeInfo(self):
        return _System.SchemaStructure_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaStructure_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaStructure_ConstCast(*args)

    def __init__(self):
        _System.SchemaStructure_swiginit(self, _System.new_SchemaStructure())

    def serialize(self, ar):
        return _System.SchemaStructure_serialize(self, ar)
    type = property(_System.SchemaStructure_type_get, _System.SchemaStructure_type_set)
    link = property(_System.SchemaStructure_link_get, _System.SchemaStructure_link_set)
    description = property(_System.SchemaStructure_description_get, _System.SchemaStructure_description_set)
    __swig_destroy__ = _System.delete_SchemaStructure

# Register SchemaStructure in _System:
_System.SchemaStructure_swigregister(SchemaStructure)

def SchemaStructure_ClassName():
    return _System.SchemaStructure_ClassName()

def SchemaStructure_TypeInfo():
    return _System.SchemaStructure_TypeInfo()

def SchemaStructure_Cast(*args):
    return _System.SchemaStructure_Cast(*args)

def SchemaStructure_ConstCast(*args):
    return _System.SchemaStructure_ConstCast(*args)

class SchemaSetupInputOption(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaSetupInputOption_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaSetupInputOption_TypeInfo()

    def className(self):
        return _System.SchemaSetupInputOption_className(self)

    def typeInfo(self):
        return _System.SchemaSetupInputOption_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaSetupInputOption_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaSetupInputOption_ConstCast(*args)

    def __init__(self):
        _System.SchemaSetupInputOption_swiginit(self, _System.new_SchemaSetupInputOption())

    def serialize(self, ar):
        return _System.SchemaSetupInputOption_serialize(self, ar)
    value = property(_System.SchemaSetupInputOption_value_get, _System.SchemaSetupInputOption_value_set)
    description = property(_System.SchemaSetupInputOption_description_get, _System.SchemaSetupInputOption_description_set)
    inputs = property(_System.SchemaSetupInputOption_inputs_get, _System.SchemaSetupInputOption_inputs_set)
    __swig_destroy__ = _System.delete_SchemaSetupInputOption

# Register SchemaSetupInputOption in _System:
_System.SchemaSetupInputOption_swigregister(SchemaSetupInputOption)

def SchemaSetupInputOption_ClassName():
    return _System.SchemaSetupInputOption_ClassName()

def SchemaSetupInputOption_TypeInfo():
    return _System.SchemaSetupInputOption_TypeInfo()

def SchemaSetupInputOption_Cast(*args):
    return _System.SchemaSetupInputOption_Cast(*args)

def SchemaSetupInputOption_ConstCast(*args):
    return _System.SchemaSetupInputOption_ConstCast(*args)

class SchemaSetupInput(SchemaParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaSetupInput_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaSetupInput_TypeInfo()

    def className(self):
        return _System.SchemaSetupInput_className(self)

    def typeInfo(self):
        return _System.SchemaSetupInput_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaSetupInput_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaSetupInput_ConstCast(*args)

    def __init__(self):
        _System.SchemaSetupInput_swiginit(self, _System.new_SchemaSetupInput())

    def serialize(self, ar):
        return _System.SchemaSetupInput_serialize(self, ar)
    text = property(_System.SchemaSetupInput_text_get, _System.SchemaSetupInput_text_set)
    echo = property(_System.SchemaSetupInput_echo_get, _System.SchemaSetupInput_echo_set)
    options = property(_System.SchemaSetupInput_options_get, _System.SchemaSetupInput_options_set)
    __swig_destroy__ = _System.delete_SchemaSetupInput

# Register SchemaSetupInput in _System:
_System.SchemaSetupInput_swigregister(SchemaSetupInput)

def SchemaSetupInput_ClassName():
    return _System.SchemaSetupInput_ClassName()

def SchemaSetupInput_TypeInfo():
    return _System.SchemaSetupInput_TypeInfo()

def SchemaSetupInput_Cast(*args):
    return _System.SchemaSetupInput_Cast(*args)

def SchemaSetupInput_ConstCast(*args):
    return _System.SchemaSetupInput_ConstCast(*args)

class SchemaSetupGroup(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaSetupGroup_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaSetupGroup_TypeInfo()

    def className(self):
        return _System.SchemaSetupGroup_className(self)

    def typeInfo(self):
        return _System.SchemaSetupGroup_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaSetupGroup_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaSetupGroup_ConstCast(*args)

    def __init__(self):
        _System.SchemaSetupGroup_swiginit(self, _System.new_SchemaSetupGroup())

    def serialize(self, ar):
        return _System.SchemaSetupGroup_serialize(self, ar)
    name = property(_System.SchemaSetupGroup_name_get, _System.SchemaSetupGroup_name_set)
    inputs = property(_System.SchemaSetupGroup_inputs_get, _System.SchemaSetupGroup_inputs_set)
    __swig_destroy__ = _System.delete_SchemaSetupGroup

# Register SchemaSetupGroup in _System:
_System.SchemaSetupGroup_swigregister(SchemaSetupGroup)

def SchemaSetupGroup_ClassName():
    return _System.SchemaSetupGroup_ClassName()

def SchemaSetupGroup_TypeInfo():
    return _System.SchemaSetupGroup_TypeInfo()

def SchemaSetupGroup_Cast(*args):
    return _System.SchemaSetupGroup_Cast(*args)

def SchemaSetupGroup_ConstCast(*args):
    return _System.SchemaSetupGroup_ConstCast(*args)

class SchemaSetup(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaSetup_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaSetup_TypeInfo()

    def className(self):
        return _System.SchemaSetup_className(self)

    def typeInfo(self):
        return _System.SchemaSetup_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaSetup_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaSetup_ConstCast(*args)

    def __init__(self):
        _System.SchemaSetup_swiginit(self, _System.new_SchemaSetup())

    def serialize(self, ar):
        return _System.SchemaSetup_serialize(self, ar)
    groups = property(_System.SchemaSetup_groups_get, _System.SchemaSetup_groups_set)
    __swig_destroy__ = _System.delete_SchemaSetup

# Register SchemaSetup in _System:
_System.SchemaSetup_swigregister(SchemaSetup)

def SchemaSetup_ClassName():
    return _System.SchemaSetup_ClassName()

def SchemaSetup_TypeInfo():
    return _System.SchemaSetup_TypeInfo()

def SchemaSetup_Cast(*args):
    return _System.SchemaSetup_Cast(*args)

def SchemaSetup_ConstCast(*args):
    return _System.SchemaSetup_ConstCast(*args)

class SchemaModule(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaModule_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaModule_TypeInfo()

    def className(self):
        return _System.SchemaModule_className(self)

    def typeInfo(self):
        return _System.SchemaModule_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaModule_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaModule_ConstCast(*args)

    def __init__(self):
        _System.SchemaModule_swiginit(self, _System.new_SchemaModule())

    def isStandalone(self):
        return _System.SchemaModule_isStandalone(self)

    def accept(self, arg2):
        return _System.SchemaModule_accept(self, arg2)

    def serialize(self, ar):
        return _System.SchemaModule_serialize(self, ar)
    aliasedModule = property(_System.SchemaModule_aliasedModule_get, _System.SchemaModule_aliasedModule_set)
    name = property(_System.SchemaModule_name_get, _System.SchemaModule_name_set)
    category = property(_System.SchemaModule_category_get, _System.SchemaModule_category_set)
    _import = property(_System.SchemaModule__import_get, _System.SchemaModule__import_set)
    description = property(_System.SchemaModule_description_get, _System.SchemaModule_description_set)
    standalone = property(_System.SchemaModule_standalone_get, _System.SchemaModule_standalone_set)
    inheritGlobalBinding = property(_System.SchemaModule_inheritGlobalBinding_get, _System.SchemaModule_inheritGlobalBinding_set)
    parameters = property(_System.SchemaModule_parameters_get, _System.SchemaModule_parameters_set)
    setup = property(_System.SchemaModule_setup_get, _System.SchemaModule_setup_set)
    __swig_destroy__ = _System.delete_SchemaModule

# Register SchemaModule in _System:
_System.SchemaModule_swigregister(SchemaModule)

def SchemaModule_ClassName():
    return _System.SchemaModule_ClassName()

def SchemaModule_TypeInfo():
    return _System.SchemaModule_TypeInfo()

def SchemaModule_Cast(*args):
    return _System.SchemaModule_Cast(*args)

def SchemaModule_ConstCast(*args):
    return _System.SchemaModule_ConstCast(*args)

class SchemaPlugin(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaPlugin_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaPlugin_TypeInfo()

    def className(self):
        return _System.SchemaPlugin_className(self)

    def typeInfo(self):
        return _System.SchemaPlugin_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaPlugin_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaPlugin_ConstCast(*args)

    def __init__(self):
        _System.SchemaPlugin_swiginit(self, _System.new_SchemaPlugin())

    def serialize(self, ar):
        return _System.SchemaPlugin_serialize(self, ar)
    name = property(_System.SchemaPlugin_name_get, _System.SchemaPlugin_name_set)
    extends = property(_System.SchemaPlugin_extends_get, _System.SchemaPlugin_extends_set)
    description = property(_System.SchemaPlugin_description_get, _System.SchemaPlugin_description_set)
    parameters = property(_System.SchemaPlugin_parameters_get, _System.SchemaPlugin_parameters_set)
    setup = property(_System.SchemaPlugin_setup_get, _System.SchemaPlugin_setup_set)
    __swig_destroy__ = _System.delete_SchemaPlugin

# Register SchemaPlugin in _System:
_System.SchemaPlugin_swigregister(SchemaPlugin)

def SchemaPlugin_ClassName():
    return _System.SchemaPlugin_ClassName()

def SchemaPlugin_TypeInfo():
    return _System.SchemaPlugin_TypeInfo()

def SchemaPlugin_Cast(*args):
    return _System.SchemaPlugin_Cast(*args)

def SchemaPlugin_ConstCast(*args):
    return _System.SchemaPlugin_ConstCast(*args)

class SchemaBinding(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.SchemaBinding_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.SchemaBinding_TypeInfo()

    def className(self):
        return _System.SchemaBinding_className(self)

    def typeInfo(self):
        return _System.SchemaBinding_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _System.SchemaBinding_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _System.SchemaBinding_ConstCast(*args)

    def __init__(self):
        _System.SchemaBinding_swiginit(self, _System.new_SchemaBinding())

    def serialize(self, ar):
        return _System.SchemaBinding_serialize(self, ar)
    name = property(_System.SchemaBinding_name_get, _System.SchemaBinding_name_set)
    module = property(_System.SchemaBinding_module_get, _System.SchemaBinding_module_set)
    category = property(_System.SchemaBinding_category_get, _System.SchemaBinding_category_set)
    description = property(_System.SchemaBinding_description_get, _System.SchemaBinding_description_set)
    parameters = property(_System.SchemaBinding_parameters_get, _System.SchemaBinding_parameters_set)
    __swig_destroy__ = _System.delete_SchemaBinding

# Register SchemaBinding in _System:
_System.SchemaBinding_swigregister(SchemaBinding)

def SchemaBinding_ClassName():
    return _System.SchemaBinding_ClassName()

def SchemaBinding_TypeInfo():
    return _System.SchemaBinding_TypeInfo()

def SchemaBinding_Cast(*args):
    return _System.SchemaBinding_Cast(*args)

def SchemaBinding_ConstCast(*args):
    return _System.SchemaBinding_ConstCast(*args)

class SchemaDefinitions(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _System.SchemaDefinitions_swiginit(self, _System.new_SchemaDefinitions())

    def createAlias(self, existingModule, newModule):
        return _System.SchemaDefinitions_createAlias(self, existingModule, newModule)

    def removeAlias(self, existingModule):
        return _System.SchemaDefinitions_removeAlias(self, existingModule)

    def moduleCount(self):
        return _System.SchemaDefinitions_moduleCount(self)

    def module(self, *args):
        return _System.SchemaDefinitions_module(self, *args)

    def pluginCount(self):
        return _System.SchemaDefinitions_pluginCount(self)

    def plugin(self, *args):
        return _System.SchemaDefinitions_plugin(self, *args)

    def bindingCount(self):
        return _System.SchemaDefinitions_bindingCount(self)

    def binding(self, *args):
        return _System.SchemaDefinitions_binding(self, *args)

    def add(self, *args):
        return _System.SchemaDefinitions_add(self, *args)

    def pluginsForModule(self, *args):
        return _System.SchemaDefinitions_pluginsForModule(self, *args)

    def bindingsForModule(self, *args):
        return _System.SchemaDefinitions_bindingsForModule(self, *args)

    def serialize(self, ar):
        return _System.SchemaDefinitions_serialize(self, ar)

    def load(self, path):
        return _System.SchemaDefinitions_load(self, path)

    def reload(self):
        return _System.SchemaDefinitions_reload(self)
    __swig_destroy__ = _System.delete_SchemaDefinitions

# Register SchemaDefinitions in _System:
_System.SchemaDefinitions_swigregister(SchemaDefinitions)

class SchemaVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register SchemaVisitor in _System:
_System.SchemaVisitor_swigregister(SchemaVisitor)

class ConfigDelegate(seiscomp3.Config.Logger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Added = _System.ConfigDelegate_Added
    Removed = _System.ConfigDelegate_Removed
    Updated = _System.ConfigDelegate_Updated

    def aboutToRead(self, filename):
        return _System.ConfigDelegate_aboutToRead(self, filename)

    def finishedReading(self, filename):
        return _System.ConfigDelegate_finishedReading(self, filename)

    def handleReadError(self, filename):
        return _System.ConfigDelegate_handleReadError(self, filename)

    def aboutToWrite(self, filename):
        return _System.ConfigDelegate_aboutToWrite(self, filename)

    def finishedWriting(self, filename, changes):
        return _System.ConfigDelegate_finishedWriting(self, filename, changes)

    def hasWriteError(self, filename):
        return _System.ConfigDelegate_hasWriteError(self, filename)

    def handleWriteTimeMismatch(self, filename, changes):
        return _System.ConfigDelegate_handleWriteTimeMismatch(self, filename, changes)

    def caseSensitivityConflict(self, arg2):
        return _System.ConfigDelegate_caseSensitivityConflict(self, arg2)

    def __init__(self):
        _System.ConfigDelegate_swiginit(self, _System.new_ConfigDelegate())
    __swig_destroy__ = _System.delete_ConfigDelegate

# Register ConfigDelegate in _System:
_System.ConfigDelegate_swigregister(ConfigDelegate)

class SymbolMapItem(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _System.SymbolMapItem_swiginit(self, _System.new_SymbolMapItem(*args))
    symbol = property(_System.SymbolMapItem_symbol_get, _System.SymbolMapItem_symbol_set)
    known = property(_System.SymbolMapItem_known_get, _System.SymbolMapItem_known_set)
    __swig_destroy__ = _System.delete_SymbolMapItem

# Register SymbolMapItem in _System:
_System.SymbolMapItem_swigregister(SymbolMapItem)

class Container(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def parameter(self, i):
        return _System.Container_parameter(self, i)

    def parameterCount(self):
        return _System.Container_parameterCount(self)

    def group(self, i):
        return _System.Container_group(self, i)

    def groupCount(self):
        return _System.Container_groupCount(self)

    def add(self, *args):
        return _System.Container_add(self, *args)

    def structure(self, i):
        return _System.Container_structure(self, i)

    def structureCount(self):
        return _System.Container_structureCount(self)

    def addType(self, arg2):
        return _System.Container_addType(self, arg2)

    def hasStructure(self, *args):
        return _System.Container_hasStructure(self, *args)

    def instantiate(self, s, name):
        return _System.Container_instantiate(self, s, name)

    def remove(self, s):
        return _System.Container_remove(self, s)

    def findStructureType(self, type):
        return _System.Container_findStructureType(self, type)

    def findParameter(self, fullName):
        return _System.Container_findParameter(self, fullName)

    def findContainer(self, path):
        return _System.Container_findContainer(self, path)

    def accept(self, arg2):
        return _System.Container_accept(self, arg2)
    super = property(_System.Container_super_get, _System.Container_super_set)
    parent = property(_System.Container_parent_get, _System.Container_parent_set)
    path = property(_System.Container_path_get, _System.Container_path_set)
    groups = property(_System.Container_groups_get, _System.Container_groups_set)
    parameters = property(_System.Container_parameters_get, _System.Container_parameters_set)
    structures = property(_System.Container_structures_get, _System.Container_structures_set)
    structureTypes = property(_System.Container_structureTypes_get, _System.Container_structureTypes_set)
    __swig_destroy__ = _System.delete_Container

# Register Container in _System:
_System.Container_swigregister(Container)

class Parameter(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Parameter_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Parameter_TypeInfo()

    def className(self):
        return _System.Parameter_className(self)

    def typeInfo(self):
        return _System.Parameter_typeInfo(self)

    def __init__(self, *args):
        _System.Parameter_swiginit(self, _System.new_Parameter(*args))

    def copy(self, backImport=False):
        return _System.Parameter_copy(self, backImport)

    def clone(self):
        return _System.Parameter_clone(self)

    def dump(self, os):
        return _System.Parameter_dump(self, os)

    def inherits(self, param):
        return _System.Parameter_inherits(self, param)

    def updateFinalValue(self, *args):
        return _System.Parameter_updateFinalValue(self, *args)
    parent = property(_System.Parameter_parent_get, _System.Parameter_parent_set)
    super = property(_System.Parameter_super_get, _System.Parameter_super_set)
    definition = property(_System.Parameter_definition_get, _System.Parameter_definition_set)
    symbols = property(_System.Parameter_symbols_get, _System.Parameter_symbols_set)
    symbol = property(_System.Parameter_symbol_get, _System.Parameter_symbol_set)
    variableName = property(_System.Parameter_variableName_get, _System.Parameter_variableName_set)
    __swig_destroy__ = _System.delete_Parameter

# Register Parameter in _System:
_System.Parameter_swigregister(Parameter)

def Parameter_ClassName():
    return _System.Parameter_ClassName()

def Parameter_TypeInfo():
    return _System.Parameter_TypeInfo()

class Structure(Container):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Structure_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Structure_TypeInfo()

    def className(self):
        return _System.Structure_className(self)

    def typeInfo(self):
        return _System.Structure_typeInfo(self)

    def __init__(self, *args):
        _System.Structure_swiginit(self, _System.new_Structure(*args))

    def copy(self, backImport=False):
        return _System.Structure_copy(self, backImport)

    def clone(self):
        return _System.Structure_clone(self)

    def instantiate(self, name):
        return _System.Structure_instantiate(self, name)

    def dump(self, os):
        return _System.Structure_dump(self, os)
    definition = property(_System.Structure_definition_get, _System.Structure_definition_set)
    name = property(_System.Structure_name_get, _System.Structure_name_set)
    __swig_destroy__ = _System.delete_Structure

# Register Structure in _System:
_System.Structure_swigregister(Structure)

def Structure_ClassName():
    return _System.Structure_ClassName()

def Structure_TypeInfo():
    return _System.Structure_TypeInfo()

class Group(Container):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Group_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Group_TypeInfo()

    def className(self):
        return _System.Group_className(self)

    def typeInfo(self):
        return _System.Group_typeInfo(self)

    def __init__(self, *args):
        _System.Group_swiginit(self, _System.new_Group(*args))

    def copy(self, backImport=False):
        return _System.Group_copy(self, backImport)

    def clone(self):
        return _System.Group_clone(self)

    def dump(self, os):
        return _System.Group_dump(self, os)
    parent = property(_System.Group_parent_get, _System.Group_parent_set)
    definition = property(_System.Group_definition_get, _System.Group_definition_set)
    __swig_destroy__ = _System.delete_Group

# Register Group in _System:
_System.Group_swigregister(Group)

def Group_ClassName():
    return _System.Group_ClassName()

def Group_TypeInfo():
    return _System.Group_TypeInfo()

class Section(Container):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Section_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Section_TypeInfo()

    def className(self):
        return _System.Section_className(self)

    def typeInfo(self):
        return _System.Section_typeInfo(self)

    def __init__(self, *args):
        _System.Section_swiginit(self, _System.new_Section(*args))

    def copy(self, backImport=False):
        return _System.Section_copy(self, backImport)

    def clone(self):
        return _System.Section_clone(self)

    def dump(self, os):
        return _System.Section_dump(self, os)
    parent = property(_System.Section_parent_get, _System.Section_parent_set)
    name = property(_System.Section_name_get, _System.Section_name_set)
    description = property(_System.Section_description_get, _System.Section_description_set)
    __swig_destroy__ = _System.delete_Section

# Register Section in _System:
_System.Section_swigregister(Section)

def Section_ClassName():
    return _System.Section_ClassName()

def Section_TypeInfo():
    return _System.Section_TypeInfo()

class Binding(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Binding_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Binding_TypeInfo()

    def className(self):
        return _System.Binding_className(self)

    def typeInfo(self):
        return _System.Binding_typeInfo(self)

    def __init__(self, n):
        _System.Binding_swiginit(self, _System.new_Binding(n))

    def clone(self):
        return _System.Binding_clone(self)

    def dump(self, os):
        return _System.Binding_dump(self, os)

    def section(self, i):
        return _System.Binding_section(self, i)

    def sectionCount(self):
        return _System.Binding_sectionCount(self)

    def findContainer(self, path):
        return _System.Binding_findContainer(self, path)

    def findParameter(self, fullName):
        return _System.Binding_findParameter(self, fullName)

    def accept(self, arg2):
        return _System.Binding_accept(self, arg2)
    parent = property(_System.Binding_parent_get, _System.Binding_parent_set)
    definition = property(_System.Binding_definition_get, _System.Binding_definition_set)
    name = property(_System.Binding_name_get, _System.Binding_name_set)
    description = property(_System.Binding_description_get, _System.Binding_description_set)
    sections = property(_System.Binding_sections_get, _System.Binding_sections_set)
    __swig_destroy__ = _System.delete_Binding

# Register Binding in _System:
_System.Binding_swigregister(Binding)

def Binding_ClassName():
    return _System.Binding_ClassName()

def Binding_TypeInfo():
    return _System.Binding_TypeInfo()

class BindingCategory(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _System.BindingCategory_swiginit(self, _System.new_BindingCategory(n))

    def binding(self, name):
        return _System.BindingCategory_binding(self, name)

    def clone(self):
        return _System.BindingCategory_clone(self)

    def dump(self, os):
        return _System.BindingCategory_dump(self, os)

    def hasBinding(self, alias):
        return _System.BindingCategory_hasBinding(self, alias)

    def instantiate(self, b, alias):
        return _System.BindingCategory_instantiate(self, b, alias)

    def alias(self, b):
        return _System.BindingCategory_alias(self, b)

    def removeInstance(self, *args):
        return _System.BindingCategory_removeInstance(self, *args)

    def findContainer(self, path):
        return _System.BindingCategory_findContainer(self, path)

    def findParameter(self, fullName):
        return _System.BindingCategory_findParameter(self, fullName)

    def accept(self, arg2):
        return _System.BindingCategory_accept(self, arg2)
    parent = property(_System.BindingCategory_parent_get, _System.BindingCategory_parent_set)
    name = property(_System.BindingCategory_name_get, _System.BindingCategory_name_set)
    bindings = property(_System.BindingCategory_bindings_get, _System.BindingCategory_bindings_set)
    bindingTypes = property(_System.BindingCategory_bindingTypes_get, _System.BindingCategory_bindingTypes_set)
    __swig_destroy__ = _System.delete_BindingCategory

# Register BindingCategory in _System:
_System.BindingCategory_swigregister(BindingCategory)

class ModuleBinding(Binding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.ModuleBinding_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.ModuleBinding_TypeInfo()

    def className(self):
        return _System.ModuleBinding_className(self)

    def typeInfo(self):
        return _System.ModuleBinding_typeInfo(self)

    def __init__(self, n):
        _System.ModuleBinding_swiginit(self, _System.new_ModuleBinding(n))

    def clone(self):
        return _System.ModuleBinding_clone(self)

    def add(self, arg2):
        return _System.ModuleBinding_add(self, arg2)

    def category(self, name):
        return _System.ModuleBinding_category(self, name)

    def writeConfig(self, filename, delegate=None):
        return _System.ModuleBinding_writeConfig(self, filename, delegate)

    def dump(self, os):
        return _System.ModuleBinding_dump(self, os)

    def findContainer(self, path):
        return _System.ModuleBinding_findContainer(self, path)

    def findParameter(self, fullName):
        return _System.ModuleBinding_findParameter(self, fullName)

    def accept(self, arg2):
        return _System.ModuleBinding_accept(self, arg2)
    configFile = property(_System.ModuleBinding_configFile_get, _System.ModuleBinding_configFile_set)
    categories = property(_System.ModuleBinding_categories_get, _System.ModuleBinding_categories_set)
    __swig_destroy__ = _System.delete_ModuleBinding

# Register ModuleBinding in _System:
_System.ModuleBinding_swigregister(ModuleBinding)

def ModuleBinding_ClassName():
    return _System.ModuleBinding_ClassName()

def ModuleBinding_TypeInfo():
    return _System.ModuleBinding_TypeInfo()

class StationID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _System.StationID_swiginit(self, _System.new_StationID(*args))

    def __eq__(self, other):
        return _System.StationID___eq__(self, other)

    def __lt__(self, other):
        return _System.StationID___lt__(self, other)
    networkCode = property(_System.StationID_networkCode_get, _System.StationID_networkCode_set)
    stationCode = property(_System.StationID_stationCode_get, _System.StationID_stationCode_set)
    __swig_destroy__ = _System.delete_StationID

# Register StationID in _System:
_System.StationID_swigregister(StationID)

class Module(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Module_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Module_TypeInfo()

    def className(self):
        return _System.Module_className(self)

    def typeInfo(self):
        return _System.Module_typeInfo(self)

    def __init__(self, _def):
        _System.Module_swiginit(self, _System.new_Module(_def))

    def hasConfiguration(self):
        return _System.Module_hasConfiguration(self)

    def add(self, arg2):
        return _System.Module_add(self, arg2)

    def section(self, i):
        return _System.Module_section(self, i)

    def sectionCount(self):
        return _System.Module_sectionCount(self)

    def findParameter(self, fullName):
        return _System.Module_findParameter(self, fullName)

    def findContainer(self, path):
        return _System.Module_findContainer(self, path)

    def supportsBindings(self):
        return _System.Module_supportsBindings(self)

    def loadProfiles(self, dir, delegate=None):
        return _System.Module_loadProfiles(self, dir, delegate)

    def addProfile(self, arg2):
        return _System.Module_addProfile(self, arg2)

    def removeProfile(self, *args):
        return _System.Module_removeProfile(self, *args)

    def bind(self, *args):
        return _System.Module_bind(self, *args)

    def removeStation(self, arg2):
        return _System.Module_removeStation(self, arg2)

    def createBinding(self):
        return _System.Module_createBinding(self)

    def createProfile(self, name):
        return _System.Module_createProfile(self, name)

    def getProfile(self, profile):
        return _System.Module_getProfile(self, profile)

    def getBinding(self, arg2):
        return _System.Module_getBinding(self, arg2)

    def readBinding(self, *args):
        return _System.Module_readBinding(self, *args)

    def accept(self, arg2):
        return _System.Module_accept(self, arg2)
    model = property(_System.Module_model_get, _System.Module_model_set)
    keyDirectory = property(_System.Module_keyDirectory_get, _System.Module_keyDirectory_set)
    configFile = property(_System.Module_configFile_get, _System.Module_configFile_set)
    definition = property(_System.Module_definition_get, _System.Module_definition_set)
    bindingTemplate = property(_System.Module_bindingTemplate_get, _System.Module_bindingTemplate_set)
    sections = property(_System.Module_sections_get, _System.Module_sections_set)
    unknowns = property(_System.Module_unknowns_get, _System.Module_unknowns_set)
    bindings = property(_System.Module_bindings_get, _System.Module_bindings_set)
    profiles = property(_System.Module_profiles_get, _System.Module_profiles_set)
    __swig_destroy__ = _System.delete_Module

# Register Module in _System:
_System.Module_swigregister(Module)

def Module_ClassName():
    return _System.Module_ClassName()

def Module_TypeInfo():
    return _System.Module_TypeInfo()

class Station(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Station_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Station_TypeInfo()

    def className(self):
        return _System.Station_className(self)

    def typeInfo(self):
        return _System.Station_typeInfo(self)

    def __init__(self):
        _System.Station_swiginit(self, _System.new_Station())

    def readConfig(self, filename):
        return _System.Station_readConfig(self, filename)

    def writeConfig(self, filename, delegate=None):
        return _System.Station_writeConfig(self, filename, delegate)

    def setConfig(self, module, profile):
        return _System.Station_setConfig(self, module, profile)

    def compareTag(self, name, value):
        return _System.Station_compareTag(self, name, value)
    config = property(_System.Station_config_get, _System.Station_config_set)
    tags = property(_System.Station_tags_get, _System.Station_tags_set)
    __swig_destroy__ = _System.delete_Station

# Register Station in _System:
_System.Station_swigregister(Station)

def Station_ClassName():
    return _System.Station_ClassName()

def Station_TypeInfo():
    return _System.Station_TypeInfo()

class Model(seiscomp3.Core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _System.Model_ClassName()

    @staticmethod
    def TypeInfo():
        return _System.Model_TypeInfo()

    def className(self):
        return _System.Model_className(self)

    def typeInfo(self):
        return _System.Model_typeInfo(self)

    def __init__(self):
        _System.Model_swiginit(self, _System.new_Model())

    def create(self, _def):
        return _System.Model_create(self, _def)

    def recreate(self):
        return _System.Model_recreate(self)

    def readConfig(self, *args):
        return _System.Model_readConfig(self, *args)

    def writeConfig(self, *args):
        return _System.Model_writeConfig(self, *args)

    def module(self, name):
        return _System.Model_module(self, name)

    def systemConfigFilename(self, read, name):
        return _System.Model_systemConfigFilename(self, read, name)

    def configFileLocation(self, read, name, stage):
        return _System.Model_configFileLocation(self, read, name, stage)

    def stationConfigDir(self, *args):
        return _System.Model_stationConfigDir(self, *args)

    def update(self, mod, container):
        return _System.Model_update(self, mod, container)

    def updateBinding(self, mod, binding):
        return _System.Model_updateBinding(self, mod, binding)

    def addStation(self, arg2):
        return _System.Model_addStation(self, arg2)

    def removeStation(self, arg2):
        return _System.Model_removeStation(self, arg2)

    def removeNetwork(self, arg2):
        return _System.Model_removeNetwork(self, arg2)

    def removeStationModule(self, arg2, arg3):
        return _System.Model_removeStationModule(self, arg2, arg3)

    def accept(self, arg2):
        return _System.Model_accept(self, arg2)
    schema = property(_System.Model_schema_get, _System.Model_schema_set)
    modules = property(_System.Model_modules_get, _System.Model_modules_set)
    categories = property(_System.Model_categories_get, _System.Model_categories_set)
    stations = property(_System.Model_stations_get, _System.Model_stations_set)
    symbols = property(_System.Model_symbols_get, _System.Model_symbols_set)
    modMap = property(_System.Model_modMap_get, _System.Model_modMap_set)
    keyDirOverride = property(_System.Model_keyDirOverride_get, _System.Model_keyDirOverride_set)
    __swig_destroy__ = _System.delete_Model

# Register Model in _System:
_System.Model_swigregister(Model)

def Model_ClassName():
    return _System.Model_ClassName()

def Model_TypeInfo():
    return _System.Model_TypeInfo()

class ModelVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register ModelVisitor in _System:
_System.ModelVisitor_swigregister(ModelVisitor)

class BindingMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _System.BindingMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.BindingMap___nonzero__(self)

    def __bool__(self):
        return _System.BindingMap___bool__(self)

    def __len__(self):
        return _System.BindingMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _System.BindingMap___getitem__(self, key)

    def __delitem__(self, key):
        return _System.BindingMap___delitem__(self, key)

    def has_key(self, key):
        return _System.BindingMap_has_key(self, key)

    def keys(self):
        return _System.BindingMap_keys(self)

    def values(self):
        return _System.BindingMap_values(self)

    def items(self):
        return _System.BindingMap_items(self)

    def __contains__(self, key):
        return _System.BindingMap___contains__(self, key)

    def key_iterator(self):
        return _System.BindingMap_key_iterator(self)

    def value_iterator(self):
        return _System.BindingMap_value_iterator(self)

    def __setitem__(self, *args):
        return _System.BindingMap___setitem__(self, *args)

    def asdict(self):
        return _System.BindingMap_asdict(self)

    def __init__(self, *args):
        _System.BindingMap_swiginit(self, _System.new_BindingMap(*args))

    def empty(self):
        return _System.BindingMap_empty(self)

    def size(self):
        return _System.BindingMap_size(self)

    def swap(self, v):
        return _System.BindingMap_swap(self, v)

    def begin(self):
        return _System.BindingMap_begin(self)

    def end(self):
        return _System.BindingMap_end(self)

    def rbegin(self):
        return _System.BindingMap_rbegin(self)

    def rend(self):
        return _System.BindingMap_rend(self)

    def clear(self):
        return _System.BindingMap_clear(self)

    def get_allocator(self):
        return _System.BindingMap_get_allocator(self)

    def count(self, x):
        return _System.BindingMap_count(self, x)

    def erase(self, *args):
        return _System.BindingMap_erase(self, *args)

    def find(self, x):
        return _System.BindingMap_find(self, x)

    def lower_bound(self, x):
        return _System.BindingMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _System.BindingMap_upper_bound(self, x)
    __swig_destroy__ = _System.delete_BindingMap

# Register BindingMap in _System:
_System.BindingMap_swigregister(BindingMap)

class GroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _System.GroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.GroupVector___nonzero__(self)

    def __bool__(self):
        return _System.GroupVector___bool__(self)

    def __len__(self):
        return _System.GroupVector___len__(self)

    def __getslice__(self, i, j):
        return _System.GroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _System.GroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _System.GroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _System.GroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _System.GroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _System.GroupVector___setitem__(self, *args)

    def pop(self):
        return _System.GroupVector_pop(self)

    def append(self, x):
        return _System.GroupVector_append(self, x)

    def empty(self):
        return _System.GroupVector_empty(self)

    def size(self):
        return _System.GroupVector_size(self)

    def swap(self, v):
        return _System.GroupVector_swap(self, v)

    def begin(self):
        return _System.GroupVector_begin(self)

    def end(self):
        return _System.GroupVector_end(self)

    def rbegin(self):
        return _System.GroupVector_rbegin(self)

    def rend(self):
        return _System.GroupVector_rend(self)

    def clear(self):
        return _System.GroupVector_clear(self)

    def get_allocator(self):
        return _System.GroupVector_get_allocator(self)

    def pop_back(self):
        return _System.GroupVector_pop_back(self)

    def erase(self, *args):
        return _System.GroupVector_erase(self, *args)

    def __init__(self, *args):
        _System.GroupVector_swiginit(self, _System.new_GroupVector(*args))

    def push_back(self, x):
        return _System.GroupVector_push_back(self, x)

    def front(self):
        return _System.GroupVector_front(self)

    def back(self):
        return _System.GroupVector_back(self)

    def assign(self, n, x):
        return _System.GroupVector_assign(self, n, x)

    def resize(self, *args):
        return _System.GroupVector_resize(self, *args)

    def insert(self, *args):
        return _System.GroupVector_insert(self, *args)

    def reserve(self, n):
        return _System.GroupVector_reserve(self, n)

    def capacity(self):
        return _System.GroupVector_capacity(self)
    __swig_destroy__ = _System.delete_GroupVector

# Register GroupVector in _System:
_System.GroupVector_swigregister(GroupVector)

class ParameterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _System.ParameterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.ParameterVector___nonzero__(self)

    def __bool__(self):
        return _System.ParameterVector___bool__(self)

    def __len__(self):
        return _System.ParameterVector___len__(self)

    def __getslice__(self, i, j):
        return _System.ParameterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _System.ParameterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _System.ParameterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _System.ParameterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _System.ParameterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _System.ParameterVector___setitem__(self, *args)

    def pop(self):
        return _System.ParameterVector_pop(self)

    def append(self, x):
        return _System.ParameterVector_append(self, x)

    def empty(self):
        return _System.ParameterVector_empty(self)

    def size(self):
        return _System.ParameterVector_size(self)

    def swap(self, v):
        return _System.ParameterVector_swap(self, v)

    def begin(self):
        return _System.ParameterVector_begin(self)

    def end(self):
        return _System.ParameterVector_end(self)

    def rbegin(self):
        return _System.ParameterVector_rbegin(self)

    def rend(self):
        return _System.ParameterVector_rend(self)

    def clear(self):
        return _System.ParameterVector_clear(self)

    def get_allocator(self):
        return _System.ParameterVector_get_allocator(self)

    def pop_back(self):
        return _System.ParameterVector_pop_back(self)

    def erase(self, *args):
        return _System.ParameterVector_erase(self, *args)

    def __init__(self, *args):
        _System.ParameterVector_swiginit(self, _System.new_ParameterVector(*args))

    def push_back(self, x):
        return _System.ParameterVector_push_back(self, x)

    def front(self):
        return _System.ParameterVector_front(self)

    def back(self):
        return _System.ParameterVector_back(self)

    def assign(self, n, x):
        return _System.ParameterVector_assign(self, n, x)

    def resize(self, *args):
        return _System.ParameterVector_resize(self, *args)

    def insert(self, *args):
        return _System.ParameterVector_insert(self, *args)

    def reserve(self, n):
        return _System.ParameterVector_reserve(self, n)

    def capacity(self):
        return _System.ParameterVector_capacity(self)
    __swig_destroy__ = _System.delete_ParameterVector

# Register ParameterVector in _System:
_System.ParameterVector_swigregister(ParameterVector)

class StructureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _System.StructureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.StructureVector___nonzero__(self)

    def __bool__(self):
        return _System.StructureVector___bool__(self)

    def __len__(self):
        return _System.StructureVector___len__(self)

    def __getslice__(self, i, j):
        return _System.StructureVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _System.StructureVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _System.StructureVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _System.StructureVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _System.StructureVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _System.StructureVector___setitem__(self, *args)

    def pop(self):
        return _System.StructureVector_pop(self)

    def append(self, x):
        return _System.StructureVector_append(self, x)

    def empty(self):
        return _System.StructureVector_empty(self)

    def size(self):
        return _System.StructureVector_size(self)

    def swap(self, v):
        return _System.StructureVector_swap(self, v)

    def begin(self):
        return _System.StructureVector_begin(self)

    def end(self):
        return _System.StructureVector_end(self)

    def rbegin(self):
        return _System.StructureVector_rbegin(self)

    def rend(self):
        return _System.StructureVector_rend(self)

    def clear(self):
        return _System.StructureVector_clear(self)

    def get_allocator(self):
        return _System.StructureVector_get_allocator(self)

    def pop_back(self):
        return _System.StructureVector_pop_back(self)

    def erase(self, *args):
        return _System.StructureVector_erase(self, *args)

    def __init__(self, *args):
        _System.StructureVector_swiginit(self, _System.new_StructureVector(*args))

    def push_back(self, x):
        return _System.StructureVector_push_back(self, x)

    def front(self):
        return _System.StructureVector_front(self)

    def back(self):
        return _System.StructureVector_back(self)

    def assign(self, n, x):
        return _System.StructureVector_assign(self, n, x)

    def resize(self, *args):
        return _System.StructureVector_resize(self, *args)

    def insert(self, *args):
        return _System.StructureVector_insert(self, *args)

    def reserve(self, n):
        return _System.StructureVector_reserve(self, n)

    def capacity(self):
        return _System.StructureVector_capacity(self)
    __swig_destroy__ = _System.delete_StructureVector

# Register StructureVector in _System:
_System.StructureVector_swigregister(StructureVector)



