# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Codes for working with geo features (e.g. polygons)"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Geo
else:
    import _Geo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geo.delete_SwigPyIterator

    def value(self):
        return _Geo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geo.SwigPyIterator_copy(self)

    def next(self):
        return _Geo.SwigPyIterator_next(self)

    def __next__(self):
        return _Geo.SwigPyIterator___next__(self)

    def previous(self):
        return _Geo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Geo:
_Geo.SwigPyIterator_swigregister(SwigPyIterator)

import seiscomp3.Math
import seiscomp3.Core
class GeoCoordinate(object):
    r"""Proxy of C++ Seiscomp::Geo::GeoCoordinate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GeoCoordinate self) -> GeoCoordinate
        __init__(GeoCoordinate self, Seiscomp::Geo::GeoCoordinate::ValueType lat_, Seiscomp::Geo::GeoCoordinate::ValueType lon_) -> GeoCoordinate
        """
        _Geo.GeoCoordinate_swiginit(self, _Geo.new_GeoCoordinate(*args))

    def set(self, lat, lon):
        r"""set(GeoCoordinate self, Seiscomp::Geo::GeoCoordinate::ValueType lat, Seiscomp::Geo::GeoCoordinate::ValueType lon)"""
        return _Geo.GeoCoordinate_set(self, lat, lon)

    def latitude(self):
        r"""latitude(GeoCoordinate self) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_latitude(self)

    def longitude(self):
        r"""longitude(GeoCoordinate self) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_longitude(self)

    def __eq__(self, other):
        r"""__eq__(GeoCoordinate self, GeoCoordinate other) -> bool"""
        return _Geo.GeoCoordinate___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(GeoCoordinate self, GeoCoordinate other) -> bool"""
        return _Geo.GeoCoordinate___ne__(self, other)

    def normalize(self):
        r"""normalize(GeoCoordinate self) -> GeoCoordinate"""
        return _Geo.GeoCoordinate_normalize(self)

    @staticmethod
    def width(lon0, lon1):
        r"""width(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_width(lon0, lon1)

    @staticmethod
    def normalizeLat(lat):
        r"""normalizeLat(Seiscomp::Geo::GeoCoordinate::ValueType lat) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_normalizeLat(lat)

    @staticmethod
    def normalizeLon(lon):
        r"""normalizeLon(Seiscomp::Geo::GeoCoordinate::ValueType lon) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_normalizeLon(lon)

    @staticmethod
    def normalizeLatLon(lat, lon):
        r"""normalizeLatLon(Seiscomp::Geo::GeoCoordinate::ValueType & lat, Seiscomp::Geo::GeoCoordinate::ValueType & lon)"""
        return _Geo.GeoCoordinate_normalizeLatLon(lat, lon)

    @staticmethod
    def distanceLon(lon0, lon1):
        r"""distanceLon(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_distanceLon(lon0, lon1)
    lat = property(_Geo.GeoCoordinate_lat_get, _Geo.GeoCoordinate_lat_set, doc=r"""lat : Seiscomp::Geo::GeoCoordinate::ValueType""")
    lon = property(_Geo.GeoCoordinate_lon_get, _Geo.GeoCoordinate_lon_set, doc=r"""lon : Seiscomp::Geo::GeoCoordinate::ValueType""")
    __swig_destroy__ = _Geo.delete_GeoCoordinate

# Register GeoCoordinate in _Geo:
_Geo.GeoCoordinate_swigregister(GeoCoordinate)

def GeoCoordinate_width(lon0, lon1):
    r"""GeoCoordinate_width(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_width(lon0, lon1)

def GeoCoordinate_normalizeLat(lat):
    r"""GeoCoordinate_normalizeLat(Seiscomp::Geo::GeoCoordinate::ValueType lat) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_normalizeLat(lat)

def GeoCoordinate_normalizeLon(lon):
    r"""GeoCoordinate_normalizeLon(Seiscomp::Geo::GeoCoordinate::ValueType lon) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_normalizeLon(lon)

def GeoCoordinate_normalizeLatLon(lat, lon):
    r"""GeoCoordinate_normalizeLatLon(Seiscomp::Geo::GeoCoordinate::ValueType & lat, Seiscomp::Geo::GeoCoordinate::ValueType & lon)"""
    return _Geo.GeoCoordinate_normalizeLatLon(lat, lon)

def GeoCoordinate_distanceLon(lon0, lon1):
    r"""GeoCoordinate_distanceLon(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_distanceLon(lon0, lon1)

class formatted_lat(object):
    r"""Proxy of C++ Seiscomp::Geo::formatted_lat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lat):
        r"""__init__(formatted_lat self, double lat) -> formatted_lat"""
        _Geo.formatted_lat_swiginit(self, _Geo.new_formatted_lat(lat))
    v = property(_Geo.formatted_lat_v_get, _Geo.formatted_lat_v_set, doc=r"""v : double""")
    __swig_destroy__ = _Geo.delete_formatted_lat

# Register formatted_lat in _Geo:
_Geo.formatted_lat_swigregister(formatted_lat)

class formatted_lon(object):
    r"""Proxy of C++ Seiscomp::Geo::formatted_lon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lon):
        r"""__init__(formatted_lon self, double lon) -> formatted_lon"""
        _Geo.formatted_lon_swiginit(self, _Geo.new_formatted_lon(lon))
    v = property(_Geo.formatted_lon_v_get, _Geo.formatted_lon_v_set, doc=r"""v : double""")
    __swig_destroy__ = _Geo.delete_formatted_lon

# Register formatted_lon in _Geo:
_Geo.formatted_lon_swigregister(formatted_lon)

class GeoBoundingBox(object):
    r"""Proxy of C++ Seiscomp::Geo::GeoBoundingBox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Disjunct = _Geo.GeoBoundingBox_Disjunct
    
    Contains = _Geo.GeoBoundingBox_Contains
    
    Intersects = _Geo.GeoBoundingBox_Intersects
    

    def __init__(self, *args):
        r"""
        __init__(GeoBoundingBox self) -> GeoBoundingBox
        __init__(GeoBoundingBox self, Seiscomp::Geo::GeoBoundingBox::ValueType south, Seiscomp::Geo::GeoBoundingBox::ValueType west, Seiscomp::Geo::GeoBoundingBox::ValueType north, Seiscomp::Geo::GeoBoundingBox::ValueType east) -> GeoBoundingBox
        """
        _Geo.GeoBoundingBox_swiginit(self, _Geo.new_GeoBoundingBox(*args))

    def __eq__(self, other):
        r"""__eq__(GeoBoundingBox self, GeoBoundingBox other) -> bool"""
        return _Geo.GeoBoundingBox___eq__(self, other)

    def __iadd__(self, other):
        r"""__iadd__(GeoBoundingBox self, GeoBoundingBox other) -> GeoBoundingBox"""
        return _Geo.GeoBoundingBox___iadd__(self, other)

    def __add__(self, other):
        r"""__add__(GeoBoundingBox self, GeoBoundingBox other) -> GeoBoundingBox"""
        return _Geo.GeoBoundingBox___add__(self, other)

    def __and__(self, other):
        r"""__and__(GeoBoundingBox self, GeoBoundingBox other) -> bool"""
        return _Geo.GeoBoundingBox___and__(self, other)

    def normalize(self):
        r"""normalize(GeoBoundingBox self) -> GeoBoundingBox"""
        return _Geo.GeoBoundingBox_normalize(self)

    def isEmpty(self):
        r"""isEmpty(GeoBoundingBox self) -> bool"""
        return _Geo.GeoBoundingBox_isEmpty(self)

    def isNull(self):
        r"""isNull(GeoBoundingBox self) -> bool"""
        return _Geo.GeoBoundingBox_isNull(self)

    def reset(self):
        r"""reset(GeoBoundingBox self)"""
        return _Geo.GeoBoundingBox_reset(self)

    def coversFullLongitude(self):
        r"""coversFullLongitude(GeoBoundingBox self) -> bool"""
        return _Geo.GeoBoundingBox_coversFullLongitude(self)

    def width(self):
        r"""width(GeoBoundingBox self) -> Seiscomp::Geo::GeoBoundingBox::ValueType"""
        return _Geo.GeoBoundingBox_width(self)

    def height(self):
        r"""height(GeoBoundingBox self) -> Seiscomp::Geo::GeoBoundingBox::ValueType"""
        return _Geo.GeoBoundingBox_height(self)

    @staticmethod
    def crossesDateLine(*args):
        r"""
        crossesDateLine() -> bool
        crossesDateLine(Seiscomp::Geo::GeoBoundingBox::ValueType east, Seiscomp::Geo::GeoBoundingBox::ValueType west) -> bool
        """
        return _Geo.GeoBoundingBox_crossesDateLine(*args)

    def center(self):
        r"""center(GeoBoundingBox self) -> GeoCoordinate"""
        return _Geo.GeoBoundingBox_center(self)

    def contains(self, *args):
        r"""
        contains(GeoBoundingBox self, GeoCoordinate v) -> bool
        contains(GeoBoundingBox self, GeoBoundingBox other) -> bool
        """
        return _Geo.GeoBoundingBox_contains(self, *args)

    def relation(self, other):
        r"""relation(GeoBoundingBox self, GeoBoundingBox other) -> Seiscomp::Geo::GeoBoundingBox::Relation"""
        return _Geo.GeoBoundingBox_relation(self, other)

    def merge(self, other):
        r"""merge(GeoBoundingBox self, GeoBoundingBox other)"""
        return _Geo.GeoBoundingBox_merge(self, other)

    def intersects(self, other):
        r"""intersects(GeoBoundingBox self, GeoBoundingBox other) -> bool"""
        return _Geo.GeoBoundingBox_intersects(self, other)

    def fromPolygon(self, n, coords, isClosed=True):
        r"""fromPolygon(GeoBoundingBox self, size_t n, GeoCoordinate coords, bool isClosed=True)"""
        return _Geo.GeoBoundingBox_fromPolygon(self, n, coords, isClosed)
    Empty = property(_Geo.GeoBoundingBox_Empty_get, _Geo.GeoBoundingBox_Empty_set, doc=r"""Empty : Seiscomp::Geo::GeoBoundingBox""")
    __swig_destroy__ = _Geo.delete_GeoBoundingBox

# Register GeoBoundingBox in _Geo:
_Geo.GeoBoundingBox_swigregister(GeoBoundingBox)

def GeoBoundingBox_crossesDateLine(*args):
    r"""
    GeoBoundingBox_crossesDateLine() -> bool
    GeoBoundingBox_crossesDateLine(Seiscomp::Geo::GeoBoundingBox::ValueType east, Seiscomp::Geo::GeoBoundingBox::ValueType west) -> bool
    """
    return _Geo.GeoBoundingBox_crossesDateLine(*args)
cvar = _Geo.cvar


def __lshift__(*args):
    r"""
    __lshift__(std::ostream & os, GeoCoordinate arg2) -> std::ostream
    __lshift__(std::ostream & os, formatted_lat arg2) -> std::ostream
    __lshift__(std::ostream & os, formatted_lon arg2) -> std::ostream
    __lshift__(std::ostream & os, GeoBoundingBox box) -> std::ostream &
    """
    return _Geo.__lshift__(*args)
class Category(object):
    r"""Proxy of C++ Seiscomp::Geo::Category class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Geo.Category_id_get, _Geo.Category_id_set, doc=r"""id : unsigned int""")
    name = property(_Geo.Category_name_get, _Geo.Category_name_set, doc=r"""name : std::string""")
    localName = property(_Geo.Category_localName_get, _Geo.Category_localName_set, doc=r"""localName : std::string""")
    parent = property(_Geo.Category_parent_get, _Geo.Category_parent_set, doc=r"""parent : p.q(const).Seiscomp::Geo::Category""")
    dataDir = property(_Geo.Category_dataDir_get, _Geo.Category_dataDir_set, doc=r"""dataDir : std::string""")

    def __init__(self, *args):
        r"""__init__(Category self, unsigned int id, std::string name="", Category parent=None) -> Category"""
        _Geo.Category_swiginit(self, _Geo.new_Category(*args))
    __swig_destroy__ = _Geo.delete_Category

# Register Category in _Geo:
_Geo.Category_swigregister(Category)

class GeoFeature(seiscomp3.Core.BaseObject):
    r"""Proxy of C++ Seiscomp::Geo::GeoFeature class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GeoFeature self, Category category=None, unsigned int rank=1) -> GeoFeature
        __init__(GeoFeature self, std::string const & name, Category category, unsigned int rank) -> GeoFeature
        __init__(GeoFeature self, std::string const & name, Category category, unsigned int rank, Seiscomp::Geo::GeoFeature::Attributes const & attributes) -> GeoFeature
        """
        _Geo.GeoFeature_swiginit(self, _Geo.new_GeoFeature(*args))
    __swig_destroy__ = _Geo.delete_GeoFeature

    def setName(self, name):
        r"""setName(GeoFeature self, std::string const & name)"""
        return _Geo.GeoFeature_setName(self, name)

    def name(self):
        r"""name(GeoFeature self) -> std::string const &"""
        return _Geo.GeoFeature_name(self)

    def category(self):
        r"""category(GeoFeature self) -> Category"""
        return _Geo.GeoFeature_category(self)

    def rank(self):
        r"""rank(GeoFeature self) -> unsigned int"""
        return _Geo.GeoFeature_rank(self)

    def attributes(self):
        r"""attributes(GeoFeature self) -> Seiscomp::Geo::GeoFeature::Attributes const &"""
        return _Geo.GeoFeature_attributes(self)

    def addVertex(self, *args):
        r"""
        addVertex(GeoFeature self, GeoCoordinate vertex, bool newSubFeature=False)
        addVertex(GeoFeature self, float lat, float lon, bool newSubFeature=False)
        """
        return _Geo.GeoFeature_addVertex(self, *args)

    def closedPolygon(self):
        r"""closedPolygon(GeoFeature self) -> bool"""
        return _Geo.GeoFeature_closedPolygon(self)

    def setClosedPolygon(self, closed):
        r"""setClosedPolygon(GeoFeature self, bool closed)"""
        return _Geo.GeoFeature_setClosedPolygon(self, closed)

    def updateBoundingBox(self):
        r"""updateBoundingBox(GeoFeature self)"""
        return _Geo.GeoFeature_updateBoundingBox(self)

    def invertOrder(self):
        r"""invertOrder(GeoFeature self)"""
        return _Geo.GeoFeature_invertOrder(self)

    def sort(self):
        r"""sort(GeoFeature self)"""
        return _Geo.GeoFeature_sort(self)

    def setUserData(self, arg2):
        r"""setUserData(GeoFeature self, void * arg2)"""
        return _Geo.GeoFeature_setUserData(self, arg2)

    def userData(self):
        r"""userData(GeoFeature self) -> void *"""
        return _Geo.GeoFeature_userData(self)

    def vertices(self):
        r"""vertices(GeoFeature self) -> Vertices"""
        return _Geo.GeoFeature_vertices(self)

    def bbox(self):
        r"""bbox(GeoFeature self) -> GeoBoundingBox"""
        return _Geo.GeoFeature_bbox(self)

    def subFeatures(self):
        r"""subFeatures(GeoFeature self) -> Indexes"""
        return _Geo.GeoFeature_subFeatures(self)

    def contains(self, v):
        r"""contains(GeoFeature self, GeoCoordinate v) -> bool"""
        return _Geo.GeoFeature_contains(self, v)

    @staticmethod
    def area(*args):
        r"""
        area() -> double
        area(GeoCoordinate polygon, size_t sides) -> double
        """
        return _Geo.GeoFeature_area(*args)

# Register GeoFeature in _Geo:
_Geo.GeoFeature_swigregister(GeoFeature)

def GeoFeature_area(*args):
    r"""
    GeoFeature_area() -> double
    GeoFeature_area(GeoCoordinate polygon, size_t sides) -> double
    """
    return _Geo.GeoFeature_area(*args)

class GeoFeatureSetObserver(object):
    r"""Proxy of C++ Seiscomp::Geo::GeoFeatureSetObserver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geo.delete_GeoFeatureSetObserver

    def geoFeatureSetUpdated(self):
        r"""geoFeatureSetUpdated(GeoFeatureSetObserver self)"""
        return _Geo.GeoFeatureSetObserver_geoFeatureSetUpdated(self)

# Register GeoFeatureSetObserver in _Geo:
_Geo.GeoFeatureSetObserver_swigregister(GeoFeatureSetObserver)

class GeoFeatureSet(seiscomp3.Core.BaseObject):
    r"""Proxy of C++ Seiscomp::Geo::GeoFeatureSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GeoFeatureSet self) -> GeoFeatureSet"""
        _Geo.GeoFeatureSet_swiginit(self, _Geo.new_GeoFeatureSet())
    __swig_destroy__ = _Geo.delete_GeoFeatureSet

    def registerObserver(self, arg2):
        r"""registerObserver(GeoFeatureSet self, GeoFeatureSetObserver arg2) -> bool"""
        return _Geo.GeoFeatureSet_registerObserver(self, arg2)

    def unregisterObserver(self, arg2):
        r"""unregisterObserver(GeoFeatureSet self, GeoFeatureSetObserver arg2) -> bool"""
        return _Geo.GeoFeatureSet_unregisterObserver(self, arg2)

    def clear(self):
        r"""clear(GeoFeatureSet self)"""
        return _Geo.GeoFeatureSet_clear(self)

    def load(self):
        r"""load(GeoFeatureSet self)"""
        return _Geo.GeoFeatureSet_load(self)

    def readBNADir(self, dirPath):
        r"""readBNADir(GeoFeatureSet self, std::string const & dirPath) -> size_t"""
        return _Geo.GeoFeatureSet_readBNADir(self, dirPath)

    def readBNAFile(self, filename, category):
        r"""readBNAFile(GeoFeatureSet self, std::string const & filename, Category category) -> bool"""
        return _Geo.GeoFeatureSet_readBNAFile(self, filename, category)

    def addFeature(self, feature):
        r"""addFeature(GeoFeatureSet self, GeoFeature feature) -> bool"""
        return _Geo.GeoFeatureSet_addFeature(self, feature)

    def features(self):
        r"""features(GeoFeatureSet self) -> GeoFeatures"""
        return _Geo.GeoFeatureSet_features(self)

    def categories(self):
        r"""categories(GeoFeatureSet self) -> Categories"""
        return _Geo.GeoFeatureSet_categories(self)

# Register GeoFeatureSet in _Geo:
_Geo.GeoFeatureSet_swigregister(GeoFeatureSet)

class GeoFeatureSetSingleton(object):
    r"""Proxy of C++ Seiscomp::Geo::GeoFeatureSetSingleton class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getInstance():
        r"""getInstance() -> GeoFeatureSet"""
        return _Geo.GeoFeatureSetSingleton_getInstance()
    __swig_destroy__ = _Geo.delete_GeoFeatureSetSingleton

# Register GeoFeatureSetSingleton in _Geo:
_Geo.GeoFeatureSetSingleton_swigregister(GeoFeatureSetSingleton)

def GeoFeatureSetSingleton_getInstance():
    r"""GeoFeatureSetSingleton_getInstance() -> GeoFeatureSet"""
    return _Geo.GeoFeatureSetSingleton_getInstance()

class Categories(object):
    r"""Proxy of C++ std::vector< Seiscomp::Geo::Category * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Categories self) -> SwigPyIterator"""
        return _Geo.Categories_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Categories self) -> bool"""
        return _Geo.Categories___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Categories self) -> bool"""
        return _Geo.Categories___bool__(self)

    def __len__(self):
        r"""__len__(Categories self) -> std::vector< Seiscomp::Geo::Category * >::size_type"""
        return _Geo.Categories___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j) -> Categories"""
        return _Geo.Categories___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j)
        __setslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j, Categories v)
        """
        return _Geo.Categories___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j)"""
        return _Geo.Categories___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i)
        __delitem__(Categories self, PySliceObject * slice)
        """
        return _Geo.Categories___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Categories self, PySliceObject * slice) -> Categories
        __getitem__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i) -> Category
        """
        return _Geo.Categories___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Categories self, PySliceObject * slice, Categories v)
        __setitem__(Categories self, PySliceObject * slice)
        __setitem__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, Category x)
        """
        return _Geo.Categories___setitem__(self, *args)

    def pop(self):
        r"""pop(Categories self) -> Category"""
        return _Geo.Categories_pop(self)

    def append(self, x):
        r"""append(Categories self, Category x)"""
        return _Geo.Categories_append(self, x)

    def empty(self):
        r"""empty(Categories self) -> bool"""
        return _Geo.Categories_empty(self)

    def size(self):
        r"""size(Categories self) -> std::vector< Seiscomp::Geo::Category * >::size_type"""
        return _Geo.Categories_size(self)

    def swap(self, v):
        r"""swap(Categories self, Categories v)"""
        return _Geo.Categories_swap(self, v)

    def begin(self):
        r"""begin(Categories self) -> std::vector< Seiscomp::Geo::Category * >::iterator"""
        return _Geo.Categories_begin(self)

    def end(self):
        r"""end(Categories self) -> std::vector< Seiscomp::Geo::Category * >::iterator"""
        return _Geo.Categories_end(self)

    def rbegin(self):
        r"""rbegin(Categories self) -> std::vector< Seiscomp::Geo::Category * >::reverse_iterator"""
        return _Geo.Categories_rbegin(self)

    def rend(self):
        r"""rend(Categories self) -> std::vector< Seiscomp::Geo::Category * >::reverse_iterator"""
        return _Geo.Categories_rend(self)

    def clear(self):
        r"""clear(Categories self)"""
        return _Geo.Categories_clear(self)

    def get_allocator(self):
        r"""get_allocator(Categories self) -> std::vector< Seiscomp::Geo::Category * >::allocator_type"""
        return _Geo.Categories_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Categories self)"""
        return _Geo.Categories_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator pos) -> std::vector< Seiscomp::Geo::Category * >::iterator
        erase(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator first, std::vector< Seiscomp::Geo::Category * >::iterator last) -> std::vector< Seiscomp::Geo::Category * >::iterator
        """
        return _Geo.Categories_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Categories self) -> Categories
        __init__(Categories self, Categories other) -> Categories
        __init__(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type size) -> Categories
        __init__(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type size, Category value) -> Categories
        """
        _Geo.Categories_swiginit(self, _Geo.new_Categories(*args))

    def push_back(self, x):
        r"""push_back(Categories self, Category x)"""
        return _Geo.Categories_push_back(self, x)

    def front(self):
        r"""front(Categories self) -> Category"""
        return _Geo.Categories_front(self)

    def back(self):
        r"""back(Categories self) -> Category"""
        return _Geo.Categories_back(self)

    def assign(self, n, x):
        r"""assign(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type n, Category x)"""
        return _Geo.Categories_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type new_size)
        resize(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type new_size, Category x)
        """
        return _Geo.Categories_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator pos, Category x) -> std::vector< Seiscomp::Geo::Category * >::iterator
        insert(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator pos, std::vector< Seiscomp::Geo::Category * >::size_type n, Category x)
        """
        return _Geo.Categories_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type n)"""
        return _Geo.Categories_reserve(self, n)

    def capacity(self):
        r"""capacity(Categories self) -> std::vector< Seiscomp::Geo::Category * >::size_type"""
        return _Geo.Categories_capacity(self)
    __swig_destroy__ = _Geo.delete_Categories

# Register Categories in _Geo:
_Geo.Categories_swigregister(Categories)

class GeoFeatures(object):
    r"""Proxy of C++ std::vector< Seiscomp::Geo::GeoFeature * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(GeoFeatures self) -> SwigPyIterator"""
        return _Geo.GeoFeatures_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(GeoFeatures self) -> bool"""
        return _Geo.GeoFeatures___nonzero__(self)

    def __bool__(self):
        r"""__bool__(GeoFeatures self) -> bool"""
        return _Geo.GeoFeatures___bool__(self)

    def __len__(self):
        r"""__len__(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::size_type"""
        return _Geo.GeoFeatures___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j) -> GeoFeatures"""
        return _Geo.GeoFeatures___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j)
        __setslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j, GeoFeatures v)
        """
        return _Geo.GeoFeatures___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j)"""
        return _Geo.GeoFeatures___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i)
        __delitem__(GeoFeatures self, PySliceObject * slice)
        """
        return _Geo.GeoFeatures___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(GeoFeatures self, PySliceObject * slice) -> GeoFeatures
        __getitem__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i) -> GeoFeature
        """
        return _Geo.GeoFeatures___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(GeoFeatures self, PySliceObject * slice, GeoFeatures v)
        __setitem__(GeoFeatures self, PySliceObject * slice)
        __setitem__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, GeoFeature x)
        """
        return _Geo.GeoFeatures___setitem__(self, *args)

    def pop(self):
        r"""pop(GeoFeatures self) -> GeoFeature"""
        return _Geo.GeoFeatures_pop(self)

    def append(self, x):
        r"""append(GeoFeatures self, GeoFeature x)"""
        return _Geo.GeoFeatures_append(self, x)

    def empty(self):
        r"""empty(GeoFeatures self) -> bool"""
        return _Geo.GeoFeatures_empty(self)

    def size(self):
        r"""size(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::size_type"""
        return _Geo.GeoFeatures_size(self)

    def swap(self, v):
        r"""swap(GeoFeatures self, GeoFeatures v)"""
        return _Geo.GeoFeatures_swap(self, v)

    def begin(self):
        r"""begin(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator"""
        return _Geo.GeoFeatures_begin(self)

    def end(self):
        r"""end(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator"""
        return _Geo.GeoFeatures_end(self)

    def rbegin(self):
        r"""rbegin(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::reverse_iterator"""
        return _Geo.GeoFeatures_rbegin(self)

    def rend(self):
        r"""rend(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::reverse_iterator"""
        return _Geo.GeoFeatures_rend(self)

    def clear(self):
        r"""clear(GeoFeatures self)"""
        return _Geo.GeoFeatures_clear(self)

    def get_allocator(self):
        r"""get_allocator(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::allocator_type"""
        return _Geo.GeoFeatures_get_allocator(self)

    def pop_back(self):
        r"""pop_back(GeoFeatures self)"""
        return _Geo.GeoFeatures_pop_back(self)

    def erase(self, *args):
        r"""
        erase(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator pos) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator
        erase(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator first, std::vector< Seiscomp::Geo::GeoFeature * >::iterator last) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator
        """
        return _Geo.GeoFeatures_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(GeoFeatures self) -> GeoFeatures
        __init__(GeoFeatures self, GeoFeatures other) -> GeoFeatures
        __init__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type size) -> GeoFeatures
        __init__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type size, GeoFeature value) -> GeoFeatures
        """
        _Geo.GeoFeatures_swiginit(self, _Geo.new_GeoFeatures(*args))

    def push_back(self, x):
        r"""push_back(GeoFeatures self, GeoFeature x)"""
        return _Geo.GeoFeatures_push_back(self, x)

    def front(self):
        r"""front(GeoFeatures self) -> GeoFeature"""
        return _Geo.GeoFeatures_front(self)

    def back(self):
        r"""back(GeoFeatures self) -> GeoFeature"""
        return _Geo.GeoFeatures_back(self)

    def assign(self, n, x):
        r"""assign(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type n, GeoFeature x)"""
        return _Geo.GeoFeatures_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type new_size)
        resize(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type new_size, GeoFeature x)
        """
        return _Geo.GeoFeatures_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator pos, GeoFeature x) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator
        insert(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator pos, std::vector< Seiscomp::Geo::GeoFeature * >::size_type n, GeoFeature x)
        """
        return _Geo.GeoFeatures_insert(self, *args)

    def reserve(self, n):
        r"""reserve(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type n)"""
        return _Geo.GeoFeatures_reserve(self, n)

    def capacity(self):
        r"""capacity(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::size_type"""
        return _Geo.GeoFeatures_capacity(self)
    __swig_destroy__ = _Geo.delete_GeoFeatures

# Register GeoFeatures in _Geo:
_Geo.GeoFeatures_swigregister(GeoFeatures)

class Vertices(object):
    r"""Proxy of C++ std::vector< Seiscomp::Geo::GeoCoordinate > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vertices self) -> SwigPyIterator"""
        return _Geo.Vertices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vertices self) -> bool"""
        return _Geo.Vertices___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vertices self) -> bool"""
        return _Geo.Vertices___bool__(self)

    def __len__(self):
        r"""__len__(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::size_type"""
        return _Geo.Vertices___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j) -> Vertices"""
        return _Geo.Vertices___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j)
        __setslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j, Vertices v)
        """
        return _Geo.Vertices___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j)"""
        return _Geo.Vertices___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i)
        __delitem__(Vertices self, PySliceObject * slice)
        """
        return _Geo.Vertices___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vertices self, PySliceObject * slice) -> Vertices
        __getitem__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i) -> GeoCoordinate
        """
        return _Geo.Vertices___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vertices self, PySliceObject * slice, Vertices v)
        __setitem__(Vertices self, PySliceObject * slice)
        __setitem__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, GeoCoordinate x)
        """
        return _Geo.Vertices___setitem__(self, *args)

    def pop(self):
        r"""pop(Vertices self) -> GeoCoordinate"""
        return _Geo.Vertices_pop(self)

    def append(self, x):
        r"""append(Vertices self, GeoCoordinate x)"""
        return _Geo.Vertices_append(self, x)

    def empty(self):
        r"""empty(Vertices self) -> bool"""
        return _Geo.Vertices_empty(self)

    def size(self):
        r"""size(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::size_type"""
        return _Geo.Vertices_size(self)

    def swap(self, v):
        r"""swap(Vertices self, Vertices v)"""
        return _Geo.Vertices_swap(self, v)

    def begin(self):
        r"""begin(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator"""
        return _Geo.Vertices_begin(self)

    def end(self):
        r"""end(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator"""
        return _Geo.Vertices_end(self)

    def rbegin(self):
        r"""rbegin(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::reverse_iterator"""
        return _Geo.Vertices_rbegin(self)

    def rend(self):
        r"""rend(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::reverse_iterator"""
        return _Geo.Vertices_rend(self)

    def clear(self):
        r"""clear(Vertices self)"""
        return _Geo.Vertices_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::allocator_type"""
        return _Geo.Vertices_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vertices self)"""
        return _Geo.Vertices_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator pos) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator
        erase(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator first, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator last) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator
        """
        return _Geo.Vertices_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vertices self) -> Vertices
        __init__(Vertices self, Vertices other) -> Vertices
        __init__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type size) -> Vertices
        __init__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type size, GeoCoordinate value) -> Vertices
        """
        _Geo.Vertices_swiginit(self, _Geo.new_Vertices(*args))

    def push_back(self, x):
        r"""push_back(Vertices self, GeoCoordinate x)"""
        return _Geo.Vertices_push_back(self, x)

    def front(self):
        r"""front(Vertices self) -> GeoCoordinate"""
        return _Geo.Vertices_front(self)

    def back(self):
        r"""back(Vertices self) -> GeoCoordinate"""
        return _Geo.Vertices_back(self)

    def assign(self, n, x):
        r"""assign(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type n, GeoCoordinate x)"""
        return _Geo.Vertices_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type new_size)
        resize(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type new_size, GeoCoordinate x)
        """
        return _Geo.Vertices_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator pos, GeoCoordinate x) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator
        insert(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator pos, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type n, GeoCoordinate x)
        """
        return _Geo.Vertices_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type n)"""
        return _Geo.Vertices_reserve(self, n)

    def capacity(self):
        r"""capacity(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::size_type"""
        return _Geo.Vertices_capacity(self)
    __swig_destroy__ = _Geo.delete_Vertices

# Register Vertices in _Geo:
_Geo.Vertices_swigregister(Vertices)

class Indexes(object):
    r"""Proxy of C++ std::vector< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Indexes self) -> SwigPyIterator"""
        return _Geo.Indexes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Indexes self) -> bool"""
        return _Geo.Indexes___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Indexes self) -> bool"""
        return _Geo.Indexes___bool__(self)

    def __len__(self):
        r"""__len__(Indexes self) -> std::vector< size_t >::size_type"""
        return _Geo.Indexes___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> Indexes"""
        return _Geo.Indexes___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
        __setslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, Indexes v)
        """
        return _Geo.Indexes___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
        return _Geo.Indexes___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Indexes self, std::vector< size_t >::difference_type i)
        __delitem__(Indexes self, PySliceObject * slice)
        """
        return _Geo.Indexes___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Indexes self, PySliceObject * slice) -> Indexes
        __getitem__(Indexes self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
        """
        return _Geo.Indexes___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Indexes self, PySliceObject * slice, Indexes v)
        __setitem__(Indexes self, PySliceObject * slice)
        __setitem__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
        """
        return _Geo.Indexes___setitem__(self, *args)

    def pop(self):
        r"""pop(Indexes self) -> std::vector< size_t >::value_type"""
        return _Geo.Indexes_pop(self)

    def append(self, x):
        r"""append(Indexes self, std::vector< size_t >::value_type const & x)"""
        return _Geo.Indexes_append(self, x)

    def empty(self):
        r"""empty(Indexes self) -> bool"""
        return _Geo.Indexes_empty(self)

    def size(self):
        r"""size(Indexes self) -> std::vector< size_t >::size_type"""
        return _Geo.Indexes_size(self)

    def swap(self, v):
        r"""swap(Indexes self, Indexes v)"""
        return _Geo.Indexes_swap(self, v)

    def begin(self):
        r"""begin(Indexes self) -> std::vector< size_t >::iterator"""
        return _Geo.Indexes_begin(self)

    def end(self):
        r"""end(Indexes self) -> std::vector< size_t >::iterator"""
        return _Geo.Indexes_end(self)

    def rbegin(self):
        r"""rbegin(Indexes self) -> std::vector< size_t >::reverse_iterator"""
        return _Geo.Indexes_rbegin(self)

    def rend(self):
        r"""rend(Indexes self) -> std::vector< size_t >::reverse_iterator"""
        return _Geo.Indexes_rend(self)

    def clear(self):
        r"""clear(Indexes self)"""
        return _Geo.Indexes_clear(self)

    def get_allocator(self):
        r"""get_allocator(Indexes self) -> std::vector< size_t >::allocator_type"""
        return _Geo.Indexes_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Indexes self)"""
        return _Geo.Indexes_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Indexes self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
        erase(Indexes self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
        """
        return _Geo.Indexes_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Indexes self) -> Indexes
        __init__(Indexes self, Indexes other) -> Indexes
        __init__(Indexes self, std::vector< size_t >::size_type size) -> Indexes
        __init__(Indexes self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> Indexes
        """
        _Geo.Indexes_swiginit(self, _Geo.new_Indexes(*args))

    def push_back(self, x):
        r"""push_back(Indexes self, std::vector< size_t >::value_type const & x)"""
        return _Geo.Indexes_push_back(self, x)

    def front(self):
        r"""front(Indexes self) -> std::vector< size_t >::value_type const &"""
        return _Geo.Indexes_front(self)

    def back(self):
        r"""back(Indexes self) -> std::vector< size_t >::value_type const &"""
        return _Geo.Indexes_back(self)

    def assign(self, n, x):
        r"""assign(Indexes self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
        return _Geo.Indexes_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Indexes self, std::vector< size_t >::size_type new_size)
        resize(Indexes self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
        """
        return _Geo.Indexes_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Indexes self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
        insert(Indexes self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
        """
        return _Geo.Indexes_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Indexes self, std::vector< size_t >::size_type n)"""
        return _Geo.Indexes_reserve(self, n)

    def capacity(self):
        r"""capacity(Indexes self) -> std::vector< size_t >::size_type"""
        return _Geo.Indexes_capacity(self)
    __swig_destroy__ = _Geo.delete_Indexes

# Register Indexes in _Geo:
_Geo.Indexes_swigregister(Indexes)



